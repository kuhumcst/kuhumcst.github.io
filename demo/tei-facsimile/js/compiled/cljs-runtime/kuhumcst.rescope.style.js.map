{"version":3,"sources":["kuhumcst/rescope/style.cljs"],"mappings":"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","names":["kuhumcst.rescope.style/remove-comments","css","clojure.string/replace","kuhumcst.rescope.style/prefix-element-selectors","prefix","css-rule","?element-split","element-selector","add-prefix","?element","cljs.core/re-matches","kuhumcst.rescope.util/prefixed","$","cljs.core/re-seq","iter__4529__auto__","s__56354","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__56356","cljs.core/chunk-buffer","i__56355","vec__56360","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56353","cljs.core/chunk-rest","vec__56379","cljs.core/first","cljs.core/cons","cljs.core/rest","_","selector","declaration","s__56364","b__56366","i__56365","iter__56363","s__56383","b__56385","i__56384","iter__56382","?elements","cljs.core.map","cljs.core/flatten","cljs.core.apply","cljs.core/str","kuhumcst.rescope.style/convert-to-data-*","?attr-split","attr-selector","add-data-*","?attr","temp__5733__auto__","vec__56417","k","x","kuhumcst.rescope.util/data-*","s__56423","b__56425","i__56424","vec__56427","iter__56422","vec__56455","s__56437","b__56439","i__56438","iter__56436","s__56466","b__56468","i__56467","iter__56465","?attrs","kuhumcst.rescope.style/trim-blank-space","clojure.string/triml","kuhumcst.rescope.style/prefix-css","cljs.core/chunk-first"],"sourcesContent":["(ns kuhumcst.rescope.style\n  (:require [clojure.string :as str]\n            [kuhumcst.rescope.util :as util]))\n\n(defn remove-comments\n  \"Remove comments from a piece of `css`.\"\n  [css]\n  (str/replace css #\"/\\*.*\\*/\" \"\"))\n\n;; TODO: support @import, @media, etc. special rules\n(defn prefix-element-selectors\n  \"Super hairy, write-only code for adding a `prefix` to all element selectors\n  in a piece of `css`.\"\n  [prefix css]\n  (let [css-rule         #\"([^{]+)(\\s*\\{[^}]*\\}\\s*)\"\n        ?element-split   #\"([\\s\\(\\)]+)|([^\\s\\(\\)]+)\"\n        element-selector #\"([a-zA-Z-]+).*\"\n        add-prefix       (fn [?element]\n                           (if (and (string? ?element)\n                                    (re-matches element-selector ?element))\n                             (util/prefixed prefix ?element)\n                             ?element))]\n    (as-> css $\n          (re-seq css-rule $)\n          (for [[_ selector declaration] $]\n            [(for [?elements (map rest (re-seq ?element-split selector))]\n               (map add-prefix ?elements))\n             declaration])\n          (flatten $)\n          (apply str $))))\n\n;; TODO: support attr(...) CSS function\n;; https://developer.mozilla.org/en-US/docs/Web/CSS/attr\n;; https://css-tricks.com/css-attr-function-got-nothin-custom-properties/\n(defn convert-to-data-*\n  \"More Perl-wannabe, garbage code for prefixing data-* to attribute selectors\n  in a piece of `css`.\"\n  [css]\n  (let [css-rule      #\"([^{]+)(\\s*\\{[^}]*\\}\\s*)\"\n        ?attr-split   #\"(\\[[^\\]]+\\])|([^\\[]+)\"\n        attr-selector #\"\\[([a-zA-Z]+)(.*)\"\n        add-data-*    (fn [?attr]\n                        (if-let [[_ k x] (and (string? ?attr)\n                                              (re-matches attr-selector ?attr))]\n                          (str \"[\" (util/data-* k) x)\n                          ?attr))]\n    (as-> css $\n          (re-seq css-rule $)\n          (for [[_ selector declaration] $]\n            [(for [?attrs (map rest (re-seq ?attr-split selector))]\n               (map add-data-* ?attrs))\n             declaration])\n          (flatten $)\n          (apply str $))))\n\n(defn trim-blank-space\n  \"Remove superfluous newlines.\"\n  [css]\n  (-> (str/replace css #\" +\\n\" \"\\n\")                        ; line-end spaces\n      (str/replace #\"\\n\\n+\" \"\\n\\n\")                         ; multiple newlines\n      (str/triml)))\n\n(defn prefix-css\n  \"Patch a piece of `css` written for the original document structure so that it\n  matches the postprocessed hiccup. Will remove comments, add `prefix` to\n  element selectors, and convert all attribute selectors to the data-* style.\"\n  [prefix css]\n  (->> (remove-comments css)\n       (prefix-element-selectors prefix)\n       (convert-to-data-*)\n       (trim-blank-space)))\n"]}