{"version":3,"sources":["kuhumcst/rescope/core.cljs"],"mappings":";;;;;;AAQA;;;AAAA,AAAMA,AAEHC;AAFH,AAGO,AAACC,AAAWD,AACZ,AAACE,AAAI,AAACC,AAAKC,AAAeC,AAAKC,AAC/B,AAACC;;AAGR;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAAC,AAAYF;AAAZG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQQ;AAAR,AAAA,AACE,AAACC,AAAwBD;;AAD3B;AAAA,AAAAZ;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAX,AAAAI,AAAQY;AAAR,AAAA,AACE,AAACC,AAAwBD;;AAD3B;AAAA,AAAA,AAAAD,AAAAX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAGF;;;;AAAA,AAAMc,AAGHC;AAHH,AAIE,AAAKC;AAAL,AACE,AAAMA;AAAN,AACE,AAAM,AAAUA,AAAM,AAAA,AAAA,AAAeA;;AACrC,AAAA,AAACC,AAAaF,AAAKC,AAAM,AAAUA;;AAFrC;;;;AAIJ,AAAA;;;;;AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAIFlC;AAJJ,AAAA,AAAAoC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAIcK;AAJd,AAKG,AAACjC,AAAiB,AAACT,AAAoBC;;AACvC,AAAA0C,AAA4B,AAAI,AAACI,AAAK,AAACC,AAAO/C,AAChB,AAAA,AAACgD,AAAWhD,AACZ,AAAA,AAACgD,AAAWhD;AAF1C2C,AAAA,AAAAN,AAAAK,AAAA,AAAA;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAQrB;AAAR,AAAAe,AAAAM,AAAA,AAAA,AAAYC;AAAZ,AAAAP,AAAAK,AAAA,AAAA,AAAkBG;AAGZI,AAAM,AAAA,AAAA,AAAI,AAASR,AAAaA,AAAKA;AACrChB,AAAM,AAAKyB;AAAL,AAAQ,AAAA,AAAA,AAACC,AAAUF,AAAOJ;;AAJtC,AAAA,AAKGvB,AAAI,AAAA,AAAC8B,AAAMR,AAAU,AAACpB,AAAWC;;;AAXvC,AAAA,AAAA,AAAMS;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAjC,AAAAgC;AAAAA,AAAA,AAAAjB,AAAAiB;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA","names":["kuhumcst.rescope.core/hiccup->custom-tags","hiccup","kuhumcst.rescope.select/all","cljs.core.map","cljs.core.comp","clojure.string/lower-case","cljs.core/name","cljs.core/first","cljs.core/set","kuhumcst.rescope.core/define-elements!","tags","seq__56503","cljs.core/seq","chunk__56504","count__56505","i__56506","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","tag","kuhumcst.rescope.interop/define-element!","kuhumcst.rescope.core/shadow-ref","comp","this","reagent.dom.render","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","kuhumcst.rescope.core/scope","p__56546","vec__56547","cljs.core.nth","seq56538","G__56539","self__4723__auto__","css","vec__56550","vec__56553","attr","children","cljs.core/map?","cljs.core/second","cljs.core/split-at","style","_","cljs.core.into","cljs.core.assoc"],"sourcesContent":["(ns kuhumcst.rescope.core\n  \"Reagent components for integrating with the shadow DOM.\"\n  (:require [clojure.string :as str]\n            [reagent.dom :as rdom]\n            [kuhumcst.rescope.interop :as interop]\n            [kuhumcst.rescope.select :as select]))\n\n;; TODO: only return custom tags, not normal HTML tags\n(defn hiccup->custom-tags\n  \"Get a set of all tags (as strings) found in a `hiccup` tree.\"\n  [hiccup]\n  (->> (select/all hiccup)\n       (map (comp str/lower-case name first))\n       (set)))\n\n;; TODO: validate and only define actual custom element tags\n(defn define-elements!\n  \"Define custom HTML elements covering all `tags`.\"\n  [tags]\n  (doseq [tag tags]\n    (interop/define-element! tag)))\n\n(defn shadow-ref\n  \"Get a :ref fn for a DOM element to render a given `comp` as its shadow root.\n  The component should accept a single argument: the element's DOM reference.\"\n  [comp]\n  (fn [this]\n    (when this\n      (set! (.-shadow this) (.attachShadow this #js{:mode \"open\"}))\n      (rdom/render [comp this] (.-shadow this)))))\n\n(defn scope\n  \"Render `hiccup` inside a shadow DOM with the root element as the shadow host.\n  Optionally takes scoped `css` to apply to the content inside the shadow DOM.\n  The `css` can be a string or hiccup, e.g. [:style], [:link], [:template].\"\n  ([hiccup & [css]]\n   (define-elements! (hiccup->custom-tags hiccup))\n   (let [[[tag attr] children] (if (map? (second hiccup))\n                                 (split-at 2 hiccup)\n                                 (split-at 1 hiccup))\n         style (if (string? css) [:style css] css)\n         comp  (fn [_] (into [:<> style] children))]\n     [tag (assoc attr :ref (shadow-ref comp))])))\n"]}