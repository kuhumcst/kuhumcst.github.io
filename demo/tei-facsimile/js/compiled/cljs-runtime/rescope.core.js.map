{"version":3,"sources":["rescope/core.cljs"],"mappings":";AAQA;;;AAAA,AAAMA,AAEHC;AAFH,AAGO,AAACC,AAAWD,AACZ,AAACE,AAAIC,AACL,AAACC,AAAOC,AACR,AAACH,AAAI,AAACI,AAAKC,AAAeC,AAC1B,AAACJ,AAAOK,AACR,AAACC;;AAER;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAAC,AAAYF;AAAZG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQQ;AAAR,AAAA,AACE,AAACC,AAAwBD;;AAD3B;AAAA,AAAAZ;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAjB,AAAAU,AAAQY;AAAR,AAAA,AACE,AAACC,AAAwBD;;AAD3B;AAAA,AAAA,AAAAD,AAAAX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAGF;;;;AAAA,AAAMc,AAGHC;AAHH,AAIE,AAAiBC;AAAjB,AACE,AAAMA;AAAN,AAEE,AAAM,AAAY,AAAUA;AAA5B,AACE,AAAM,AAAUA,AAAM,AAAA,AAAA,AAAeA;;AADvC;;AAEA,AAAA,AAACC,AAAaF,AAAKC,AAAM,AAAUA;;AAJrC;;;;AAMJ,AAAA,AAAME,AACHC,AAASC;AADZ,AAEE,AAAA,AAACC,AAAUF,AAASG,AAAW,AAACR,AAAW,AAACS,AAAWH;;AAEzD,AAAA;;;;;AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAIF3C;AAJJ,AAAA,AAAA6C,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAIcK;AAJd,AAKG,AAACvC,AAAiB,AAACZ,AAAoBC;;AACvC,AAAAmD,AAA4B,AAAI,AAACI,AAAK,AAACC,AAAOxD,AAChB,AAAA,AAACyD,AAAWzD,AACZ,AAAA,AAACyD,AAAWzD;AAF1CoD,AAAA,AAAAN,AAAAK,AAAA,AAAA;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAQ3B;AAAR,AAAAqB,AAAAM,AAAA,AAAA,AAAYC;AAAZ,AAAAP,AAAAK,AAAA,AAAA,AAAkBG;AAGZI,AAAM,AAAA,AAAA,AAAI,AAASR,AAAaA,AAAKA;AACrCtB,AAAM,AAAK+B;AAAL,AAAQ,AAAA,AAAA,AAACC,AAAUF,AAAOJ;;AAJtC,AAAA,AAKG7B,AAAI,AAAA,AAACoC,AAAMR,AAAU,AAAC1B,AAAWC;;;AAXvC,AAAA,AAAA,AAAMe;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAA7C,AAAA4C;AAAAA,AAAA,AAAAvB,AAAAuB;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA","names":["rescope.core/hiccup->custom-tags","hiccup","rescope.select/all","cljs.core.map","cljs.core/first","cljs.core.filter","cljs.core/keyword?","cljs.core.comp","clojure.string/lower-case","cljs.core/name","rescope.util/valid-custom-tag?","cljs.core/set","rescope.core/define-elements!","tags","seq__52024","cljs.core/seq","chunk__52025","count__52026","i__52027","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","tag","rescope.interop/define-element!","rescope.core/shadow-ref","comp","this","reagent.dom.render","rescope.core/shadow-wrapper","old-node","new-node","cljs.core.vary_meta","cljs.core/assoc","cljs.core/constantly","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rescope.core/scope","p__52059","vec__52060","cljs.core.nth","seq52050","G__52051","self__4723__auto__","css","vec__52063","vec__52066","attr","children","cljs.core/map?","cljs.core/second","cljs.core/split-at","style","_","cljs.core.into","cljs.core.assoc"],"sourcesContent":["(ns rescope.core\n  \"Reagent components for integrating with the shadow DOM.\"\n  (:require [clojure.string :as str]\n            [reagent.dom :as rdom]\n            [rescope.util :as util]\n            [rescope.interop :as interop]\n            [rescope.select :as select]))\n\n(defn hiccup->custom-tags\n  \"Get a set of all custom tags (as strings) found in a `hiccup` tree.\"\n  [hiccup]\n  (->> (select/all hiccup)\n       (map first)\n       (filter keyword?)\n       (map (comp str/lower-case name))\n       (filter util/valid-custom-tag?)\n       (set)))\n\n(defn define-elements!\n  \"Define custom HTML elements covering all `tags`.\"\n  [tags]\n  (doseq [tag tags]\n    (interop/define-element! tag)))\n\n(defn shadow-ref\n  \"Get a :ref fn for a DOM element to render a given `comp` as its shadow root.\n  The component should accept a single argument: the element's DOM reference.\"\n  [comp]\n  (fn [^js/Element this]\n    (when this\n      ;; TODO: this extra check was suddenly necessary - investigate\n      (when (undefined? (.-shadow this))\n        (set! (.-shadow this) (.attachShadow this #js{:mode \"open\"})))\n      (rdom/render [comp this] (.-shadow this)))))\n\n(defn shadow-wrapper\n  [old-node new-node]\n  (vary-meta old-node assoc :ref (shadow-ref (constantly new-node))))\n\n(defn scope\n  \"Render `hiccup` inside a shadow DOM with the root element as the shadow host.\n  Optionally takes scoped `css` to apply to the content inside the shadow DOM.\n  The `css` can be a string or hiccup, e.g. [:style], [:link], [:template].\"\n  ([hiccup & [css]]\n   (define-elements! (hiccup->custom-tags hiccup))\n   (let [[[tag attr] children] (if (map? (second hiccup))\n                                 (split-at 2 hiccup)\n                                 (split-at 1 hiccup))\n         style (if (string? css) [:style css] css)\n         comp  (fn [_] (into [:<> style] children))]\n     [tag (assoc attr :ref (shadow-ref comp))])))\n"]}