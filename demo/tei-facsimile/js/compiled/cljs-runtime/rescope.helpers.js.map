{"version":3,"sources":["rescope/helpers.cljc"],"mappings":"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","names":["rescope.helpers/as-data-*","attr","cljs.core.into","iter__4529__auto__","s__52070","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__52072","cljs.core/chunk-buffer","i__52071","vec__52079","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52069","cljs.core/chunk-rest","vec__52096","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","rescope.util/data-*","p__52113","vec__52116","seq__52117","first__52118","cljs.core/next","rescope.helpers/attr->data-attr","tag","content","node","cljs.core/map?","cljs.core.assoc","p__52130","vec__52131","seq__52132","first__52133","rescope.helpers/rename-attr","kmap","and__4115__auto__","clojure.set/rename-keys","rescope.helpers/add-prefix","prefix","cljs.core/Keyword","cljs.core/name","new-tag","rescope.util/prefixed","p__52146","vec__52148","seq__52149","first__52150","rescope.helpers/meta-into-attr","temp__5733__auto__","m","cljs.core/meta","cljs.core.update","cljs.core/merge","p__52165","map__52168","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rescope.helpers/default-fn","attr-kmap","opts","cljs.core/chunk-first"],"sourcesContent":["(ns rescope.helpers\n  \"Helper functions for transforming Hiccup into valid HTML using Cuphic.\"\n  (:require [clojure.set :as set]\n            [rescope.util :as util]))\n\n(defn as-data-*\n  [attr]\n  (into {} (for [[k v] attr]\n             [(keyword (util/data-* k)) v])))\n\n(defn attr->data-attr\n  \"Convert all attributes into data-* attributes.\"\n  [[tag attr & content :as node]]\n  (if (map? attr)\n    (assoc node 1 (as-data-* attr))\n    node))\n\n(defn rename-attr\n  \"Rename attr keys according to `kmap`.\"\n  [kmap [tag attr & content :as node]]\n  (if (and kmap (map? attr))\n    (assoc node 1 (set/rename-keys attr (as-data-* kmap)))\n    node))\n\n(defn add-prefix\n  \"Transform a hiccup vector node `loc` to a valid custom element name by\n  setting a custom `prefix`.\"\n  [prefix node]\n  (if (keyword? (first node))\n    (let [tag     (name (first node))\n          new-tag (keyword (util/prefixed prefix tag))]\n      (assoc node 0 new-tag))\n    node))\n\n(defn meta-into-attr\n  \"Merge the element metadata into the attr. Mimics the behaviour of reagent.\"\n  [[tag attr & content :as node]]\n  (if-let [m (meta node)]\n    (if (map? attr)\n      (update node 1 merge m)\n      (into [tag m] content))\n    node))\n\n(defn default-fn\n  \"Return function applying default transformations based on `opts`.\n\n  This is meant to be used as the :default fn in the final stage of a Cuphic\n  rewrite to ensure that the Hiccup will convert to standards-compliant HTML.\"\n  [{:keys [attr-kmap prefix] :as opts}]\n  (fn [node]\n    (->> node\n         (attr->data-attr)\n         (rename-attr attr-kmap)\n         (add-prefix prefix)\n         (meta-into-attr))))\n"]}