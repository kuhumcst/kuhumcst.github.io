{"version":3,"sources":["kuhumcst/recap/drag.cljs"],"mappings":";;AAMA;;;AAAKA,AAEH,AAAA,AAACC;AAEH;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAKC;AAAL,AACE,AAAMC,AAAQ,AAAK,AAACC,AAAKH;AAAzB,AACE,AAACI,AAAMP,AAASQ,AAAMH,AAAQF;;AAC9B,AAAA,AAAM,AAAA,AAAAC;;AACN,AAAA,AAAM,AAAc,AAAgBA;;AACpC,AAAA,AAAU,AAAgBA,AAAQC;;;AAGxC,AAAA,AAAMI;AAAN,AAEE,AAAKL;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAM,AAAA,AAAAA;;;AAEV;;;;AAAA,AAAMM,AAGHC;AAHH,AAIE,AAAKP;AAAL,AACE,AAAiBA;;AACjB,AAAMC,AAAQ,AAAA,AAAU,AAAgBD;AAClCD,AAAQ,AAAA,AAAAS,AAACC,AAAKb,AAASK;AAD7B,AAEE,AAAMF;AAAN,AACE,AAACI,AAAMP,AAASc,AAAOT;;AACvB,AAAAU,AAAS,AAACZ,AAAAA,AAAAA;AAAV,AAAA,AAAAY,AAAAA,AAACJ,AAAAA,AAAAA;;AAFH","names":["kuhumcst.recap.drag/drag-fns","cljs.core.atom","kuhumcst.recap.drag/on-drag-start","drag-fn","e","drag-id","cljs.core/hash","cljs.core.swap_BANG_","cljs.core/assoc","kuhumcst.recap.drag/on-drag-over","kuhumcst.recap.drag/on-drop","drop-fn","cljs.core/deref","cljs.core.get","cljs.core/dissoc","G__46493"],"sourcesContent":["(ns kuhumcst.recap.drag\n  \"A functional take on drag-and-drop.\n\n  All successful drops execute the code `(drop-fn (drag-fn))` in order\n  to effectuate the necessary state changes.\")\n\n(def drag-fns\n  \"Temporary storage for drag-fns.\"\n  (atom {}))\n\n(defn on-drag-start\n  \"The `drag-fn` is called with no args on a successful drop.\"\n  [drag-fn]\n  (fn [e]\n    (let [drag-id (str (hash drag-fn))]\n      (swap! drag-fns assoc drag-id drag-fn)\n      (set! e.dataTransfer.effectAllowed \"move\")\n      (set! (.-dropEffect (.-dataTransfer e)) \"move\")\n      (.setData (.-dataTransfer e) \"fn\" drag-id))))\n\n;; The onDragOver handler is needed for drag-and-drop to work.\n(defn on-drag-over\n  []\n  (fn [e]\n    (.preventDefault e)\n    (set! e.dataTransfer.dropEffect \"move\")))\n\n(defn on-drop\n  \"The `drop-fn` is called with the drag-fn's output as its input on a\n  successful drop.\"\n  [drop-fn]\n  (fn [e]\n    (.preventDefault e)\n    (let [drag-id (.getData (.-dataTransfer e) \"fn\")\n          drag-fn (get @drag-fns drag-id)]\n      (when drag-fn\n        (swap! drag-fns dissoc drag-id)\n        (drop-fn (drag-fn))))))\n"]}