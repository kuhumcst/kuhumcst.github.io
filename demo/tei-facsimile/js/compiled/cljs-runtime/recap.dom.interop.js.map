{"version":3,"sources":["recap/dom/interop.cljc"],"mappings":";AAGA,AAAA,AAAKA;AAIL;;;AAAA,AAAMC,AAEHC,AAAQC;AAFX,AAGE,AAAMC,AAAW,AAAaF;AACxBG,AAAW,AAAA,AAAU,AAACC,AAAUF,AACX,AAACG,AAAO,AAACC,AAAQC,AAAWT,AAC5B,AAACU,AACDP;AAJ3B,AAKE,AAAMC,AAAWC;;AAErB;;;AAAA,AAAMM,AAEHT,AAAQC;AAFX,AAGE,AAAMC,AAAW,AAAaF;AACxBG,AACgB,AAAA,AAAAO,AAACL,AACD,AAACG;AADD,AAAS,AAAAE,AAACC,AAAiB,AAAA,AAAUV;AADrC,AAACG,AAAUF;AADjC,AAIE,AAASA,AAAWC","names":["recap.dom.interop/bem-block","recap.dom.interop/add-modifier!","element","modifier","class-list","class","cljs.core.array_seq","cljs.core.filter","cljs.core.partial","cljs.core/re-matches","cljs.core/first","recap.dom.interop/remove-modifier!","p1__47790#","clojure.string/ends-with?"],"sourcesContent":["(ns recap.dom.interop\n  (:require [clojure.string :as str]))\n\n(def bem-block\n  #\"(\\w-?)+\")\n\n;; Assumes BEM convention is respected, i.e. only a single block class applied.\n(defn add-modifier!\n  \"Add a BEM `modifier` class to an `element`.\"\n  [element modifier]\n  (let [class-list (.-classList element)\n        class      (str (->> (array-seq class-list)\n                             (filter (partial re-matches bem-block))\n                             (first))\n                        \"--\" modifier)]\n    (.add class-list class)))\n\n(defn remove-modifier!\n  \"Remove a BEM `modifier` class from an `element`.\"\n  [element modifier]\n  (let [class-list (.-classList element)\n        class      (->> (array-seq class-list)\n                        (filter #(str/ends-with? % (str \"--\" modifier)))\n                        (first))]\n    (.remove class-list class)))"]}