{"version":3,"sources":["recap/dom/keyboard.cljc"],"mappings":";AAYA;;;AAAA,AAAOA,AAEJC;AAFH,AAGE,AAAMC,AAAK,AAAA,AAAeD;AAA1B,AAEO,AAAA,AAAAE,AAACC;AAAD,AAAS,AAACC,AAAEH,AAAK,AAAAC,AAAA;AADjB,AAAY,AAAcF;;AAGnC;;;AAAA,AAAOK,AAEJL;AAFH,AAGE,AAAA,AAAOgB;AAAP,AACOC;AADPX,AAE4B,AAACP,AAAcC;AAF3CO,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAEQQ;AAFRV,AAEkBW;AAFlB,AAAA,AAAOH,AAAAA;AACAC,AAAAA;AADPX,AAAAA;;AAAA,AAAA,AAAOU,AAAAA;AACAC,AAAAA;AADPJ,AAAAP;AAAAQ,AAAA,AAAAL,AAAAI;AAAAE,AAAA,AAAAJ,AAAAG;AAAAA,AAAA,AAAAF,AAAAE;AAAAC,AAEQG;AAFRJ,AAEkBK;AAFlB,AAGE,AACE,AAAA,AAAMD;AADR,AACkBF,AAAOC;;AADzB,AAEE,AAACb,AAAEJ,AAAQkB;AAAS,AAAOF;AAAP;AAAiBG;;;;;;AAFvC,AAGEF;AAAM,AAAOD;AAAO,AAACI,AAAKH,AAAMC;AAASC;;;;;;AAH3C,AAIEH;AAAO,AAAO,AAACI,AAAKJ,AAAOE;AAASD;AAAME;;;;;;AAJ5C;;;;;;;;AAMJ,AAAKE,AACH,AAACC,AAAUC,AAAOC;AAEpB,AAAKC,AACH,AAACH,AAAUI,AAASC;AAEtB,AAAKC,AACH,AAACN,AAAUO,AAAaC;AAE1B,AAAKC,AACH,AAACT,AAAUD,AAAUI,AAAUG;AAEjC;;;;;;;;;;AAAA,AAAMI,AASHC;AATH,AAUE,AAAM,AAACF,AAAAA,AAAAA,AAAe,AAAAE,AAAA,AAAAA;AAAtB,AACE,AAAiBA;;AACjB,AAAkBA;;AAClB,AAAAC,AAAqB,AAAC7B,AAAuB,AAAA4B;AAA7C,AAAAE,AAAAD,AAAA,AAAA,AAAOlB;AAAP,AAAAmB,AAAAD,AAAA,AAAA,AAAcjB;AAAd,AACE,AAAAmB,AAAOE;AAAPD,AAAiB,AAAAJ;AAAjB,AAAA,AAAA,AAAAG,AAAAA,AAAAC,AAAAD,AAAAC,AACET,AAAAA;AAAW,AAIE,AAACW,AAAe,AAAA,AAAAN;;AAChB,AAAQ,AAAAA;;AACR,AAAQ,AAAAA;;AAPvB,AAAA,AAAAG,AAAAA,AAAAC,AAAAD,AAAAC,AAQEhB,AAAAA;AAAU,AAAQ,AAACmB,AAAK,AAAI,AAACC,AAAOzB,AACVC,AACAD;;AAV5B,AAAA,AAAAoB,AAAAA,AAAAC,AAAAD,AAAAC,AAWEZ,AAAAA;AAAU,AAAQ,AAACd,AAAM,AAAI,AAAC8B,AAAOxB,AACVD,AACAC;;AAb7B;;;;;AAJJ","names":["recap.dom.keyboard/role-siblings","element","role","p1__48020#","cljs.core.filter","cljs.core._EQ_","recap.dom.keyboard/adjacent-role-siblings","G__48029","vec__48034","seq__48035","cljs.core/seq","first__48036","cljs.core/first","cljs.core/next","vec__48048","seq__48049","first__48050","before","after","sibling","siblings","cljs.core.conj","recap.dom.keyboard/prev-item","clojure.set.union","recap.dom.key/up","recap.dom.key/left","recap.dom.keyboard/next-item","recap.dom.key/down","recap.dom.key/right","recap.dom.keyboard/click-item","recap.dom.key/spacebar","recap.dom.key/enter","recap.dom.keyboard/supported-keys","recap.dom.keyboard/roving-tabindex-handler","e","vec__48069","cljs.core.nth","pred__48075","expr__48076","cljs.core/contains?","recap.dom.focus/request!","cljs.core/last","cljs.core/empty?"],"sourcesContent":["(ns recap.dom.keyboard\n  \"Helpers for ARIA-compliant keyboard navigation.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard\"\n  (:require [clojure.set :as set]\n            [recap.dom.focus :as focus]\n            [recap.dom.key :as key]))\n\n;; https://javascript.info/bubbling-and-capturing\n;; https://www.mutuallyhuman.com/blog/keydown-is-the-only-keyboard-event-we-need/\n\n(defn- role-siblings\n  \"Get siblings for an `element` (including itself) with the same ARIA role.\"\n  [element]\n  (let [role (.getAttribute element \"role\")]\n    (->> (.-children (.-parentNode element))\n         (filter #(= role (.getAttribute % \"role\"))))))\n\n(defn- adjacent-role-siblings\n  \"Get adjacent role siblings for an `element` as [before after].\"\n  [element]\n  (loop [before []\n         after  nil\n         [sibling & siblings] (role-siblings element)]\n    (cond\n      (nil? sibling) [before after]\n      (= element sibling) (recur before [] siblings)\n      after (recur before (conj after sibling) siblings)\n      before (recur (conj before sibling) after siblings))))\n\n(def prev-item\n  (set/union key/up key/left))\n\n(def next-item\n  (set/union key/down key/right))\n\n(def click-item\n  (set/union key/spacebar key/enter))\n\n(def supported-keys\n  (set/union prev-item next-item click-item))\n\n(defn roving-tabindex-handler\n  \"OnKeyDown handler with keyboard functionality needed for a roving tabindex.\n  Focus moves between adjacent DOM siblings with the same ARIA role.\n\n  Requires :on-click and :role to have been set on the affected elements.\n  The elements should also update their :tab-index attribute reactively.\n\n  ARIA references:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within\"\n  [e]\n  (when (supported-keys e.key)\n    (.preventDefault e)\n    (.stopPropagation e)\n    (let [[before after] (adjacent-role-siblings e.target)]\n      (condp contains? e.key\n        click-item (do\n                     ;; Focus is both set directly and requested asynchronously.\n                     ;; Which method is effective is determined by whether the\n                     ;; element has to be re-rendered (async) or not (direct).\n                     (focus/request! e.target.id)\n                     (.click e.target)\n                     (.focus e.target))\n        prev-item (.focus (last (if (empty? before)\n                                  after\n                                  before)))\n        next-item (.focus (first (if (empty? after)\n                                   before\n                                   after)))\n        :no-op))))\n"]}