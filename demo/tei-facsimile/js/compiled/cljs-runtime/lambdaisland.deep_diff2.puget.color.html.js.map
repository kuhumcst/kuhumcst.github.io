{"version":3,"sources":["lambdaisland/deep_diff2/puget/color/html.cljc"],"mappingsjE,AACE,AAAA,AACK,AAAA,AAACM,AAAa,AAACH,AAAI,AAAAI;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAY,AAAA,AAAK,AAACN,AAAKK,AAAOC;AADtD,AAC0DV;;AAG9D;;;AAAA,AAAMW,AAEHC;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAWD;;AAEd;;;;AAAA,AAAME,AAGHC;AAHH,AAIE,AAAI,AAASA;AACX,AAAMC,AAAa,AAACL,AAAiBI;AAC/BE,AAAM,AAAA,AAACC,AAAUF;AADvB,AAEE,AAACG,AAAO,AAAKC,AAAIC;AAAT,AACE,AAAAC,AAAM,AAACE,AAAMH;AAAb,AAAA,AAAA,AAAAE,AAAA,AAAAD;AACMF;;AADN,AAAA,AAAAG,AAAA,AAAAD;AAEK,AAAMG,AAAc,AAAC,AAAA,AAACC,AAAKC,AAAO,AAAA,AAACC,AAAaP;AAC1CQ,AAAQ,AAAA,AAACC,AAAKT,AAAOI;AACrBJ,AAAK,AAACS,AAAKT,AAAKI;AAChBL,AAAI,AAAA,AAAA,AAACW,AAAKX,AAAcS;AAH9B,AAIE,AAAI,AAACG,AAAIX;AACP,AAACU,AAAKX,AAAIC;;AACVD;;;AART,AASE,AAACW,AAAKX,AAAIC;;;;AAVtB,AAAA,AAYQJ;;AACVF;;;AAEJ;;;AAAA,AAAMkB,AAEHC;AAFH,AAGE,AAACC,AAASrB,AAAiBoB;;AAE7B,AAAAE,AAAA,AAAA,AACGC,AAAQC,AAAQJ;AADnB,AAEE,AAAAK,AAAe,AAAIF,AAAsB,AAAA,AAAA,AAAClC,AAAImC,AAASN;AAAvD,AAAA,AAAAO;AAAA,AAAAA,AAASxC;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAACD,AAAMC,AAC7B,AAACkC,AAAqBC;;AAEvB,AAACD,AAAqBC;;;AAE1B,AAAAM,AAAA,AAAA,AACGH,AAAQC,AAAQ1B;AADnB,AAEE,AAAA2B,AAAe,AAAIF,AAAsB,AAAA,AAAA,AAAClC,AAAImC,AAASN;AAAvD,AAAA,AAAAO;AAAA,AAAAA,AAASxC;AAAT,AACE,AAAA,AAAA,AAAA,AAAc,AAACD,AAAMC,AAAW,AAACY,AAAiBC;;AAClD,AAACD,AAAiBC;;;AAEtB,AAAAwB,AAAA,AAAA,AACGC,AAAQC,AAAQJ;AADnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEiC,AAAC9B,AAAKkC,AACpC,AAACL,AAAqBC;;AAGzB,AAAAM,AAAA,AAAA,AACGH,AAAQC,AAAQ1B;AADnB,AAEE,AAAA,AAAA,AAAA,AAAsB,AAACR,AAAKkC,AAAe,AAAC3B,AAAiBC","names":["lambdaisland.deep-diff2.puget.color.html/style-attribute","lambdaisland.deep-diff2.puget.color.html/style","codes","attributes","p1__51361#","cljs.core.map","cljs.core.get","cljs.core/name","clojure.string.join","p__51371","vec__51372","cljs.core.nth","k","v","lambdaisland.deep-diff2.puget.color.html/escape-html-text","text","clojure.string/escape","lambdaisland.deep-diff2.puget.color.html/escape-html-node","node","escaped-text","spans","clojure.string.split","cljs.core.reduce","acc","span","G__51388","cljs.core._EQ_","cljs.core/first","semicolon-pos","cljs.core.fnil","cljs.core/inc","clojure.string.index_of","escaped","cljs.core.subs","cljs.core.conj","cljs.core/seq","lambdaisland.deep-diff2.puget.color.html/escape-html-document","document","clojure.walk/postwalk","lambdaisland.deep-diff2.puget.color/document","options","element","temp__5733__auto__","lambdaisland.deep-diff2.puget.color/text"],"sourcesContent":["(ns lambdaisland.deep-diff2.puget.color.html\n  \"Coloring implementation that wraps text in HTML tags to apply color.\n\n  Supports the following modes for `:color-markup`:\n\n  - `:html-inline` applies inline `style` attributes to the tags.\n  - `:html-classes` adds semantic `class` attributes to the tags.\"\n  (:require\n   [clojure.string :as str]\n   [clojure.walk :refer [postwalk]]\n   [lambdaisland.deep-diff2.puget.color :as color]))\n\n(def style-attribute\n  \"Map from keywords usable in a color-scheme value to vectors\n  representing css style attributes\"\n  {:none       nil\n   :bold       [:font-weight \"bold\"]\n   :underline  [:text-decoration \"underline\"]\n   :blink      [:text-decoration \"blink\"]\n   :reverse    nil\n   :hidden     [:visibility \"hidden\"]\n   :strike     [:text-decoration \"line-through\"]\n   :black      [:color \"black\"]\n   :red        [:color \"red\"]\n   :green      [:color \"green\"]\n   :yellow     [:color \"yellow\"]\n   :blue       [:color \"blue\"]\n   :magenta    [:color \"magenta\"]\n   :cyan       [:color \"cyan\"]\n   :white      [:color \"white\"]\n   :fg-256     nil\n   :fg-reset   nil\n   :bg-black   [:background-color \"black\"]\n   :bg-red     [:background-color \"red\"]\n   :bg-green   [:background-color \"green\"]\n   :bg-yellow  [:background-color \"yellow\"]\n   :bg-blue    [:background-color \"blue\"]\n   :bg-magenta [:background-color \"magenta\"]\n   :bg-cyan    [:background-color \"cyan\"]\n   :bg-white   [:background-color \"white\"]\n   :bg-256     nil\n   :bg-reset   nil})\n\n(defn style\n  \"Returns a formatted style attribute for a span given a seq of\n  keywords usable in a :color-scheme value\"\n  [codes]\n  (let [attributes (map #(get style-attribute % [:color (name %)]) codes)]\n    (str \"style=\\\"\"\n         (str/join \";\" (map (fn [[k v]] (str (name k) \":\" v)) attributes))\n         \"\\\"\")))\n\n(defn escape-html-text\n  \"Escapes special characters into HTML entities.\"\n  [text]\n  (str/escape text {\\& \"&amp;\" \\< \"&lt;\" \\> \"&gt;\" \\\" \"&quot;\"}))\n\n(defn escape-html-node\n  \"Applies HTML escaping to the node if it is a string. Returns a print\n  document representing the escaped string, or the original node if not.\"\n  [node]\n  (if (string? node)\n    (let [escaped-text (escape-html-text node)\n          spans (str/split escaped-text #\"(?=&)\")]\n      (reduce (fn [acc span]\n                (case (first span)\n                  nil acc\n                  \\& (let [semicolon-pos ((fnil inc 0) (str/index-of span \\;))\n                           escaped (subs span 0 semicolon-pos)\n                           span (subs span semicolon-pos)\n                           acc (conj acc [:escaped escaped])]\n                       (if (seq span)\n                         (conj acc span)\n                         acc))\n                  (conj acc span)))\n              [:span]\n              spans))\n    node))\n\n(defn escape-html-document\n  \"Escapes special characters into fipp :span/:escaped nodes\"\n  [document]\n  (postwalk escape-html-node document))\n\n(defmethod color/document :html-inline\n  [options element document]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    [:span [:pass \"<span \" (style codes) \">\"]\n     (escape-html-document document)\n     [:pass \"</span>\"]]\n    (escape-html-document document)))\n\n(defmethod color/text :html-inline\n  [options element text]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    (str \"<span \" (style codes) \">\" (escape-html-text text) \"</span>\")\n    (escape-html-text text)))\n\n(defmethod color/document :html-classes\n  [options element document]\n  [:span [:pass \"<span class=\\\"\" (name element) \"\\\">\"]\n   (escape-html-document document)\n   [:pass \"</span>\"]])\n\n(defmethod color/text :html-classes\n  [options element text]\n  (str \"<span class=\\\"\" (name element) \"\\\">\" (escape-html-text text) \"</span>\"))\n"]}