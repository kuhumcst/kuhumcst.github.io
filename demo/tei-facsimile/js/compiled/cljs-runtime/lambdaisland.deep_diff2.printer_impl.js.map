{"version":3,"sources":["lambdaisland/deep_diff2/printer_impl.cljc"],"mappings":"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","names":["lambdaisland.deep-diff2.printer-impl/print-deletion","printer","expr","no-color","cljs.core.assoc","lambdaisland.deep-diff2.puget.color/document","lambdaisland.deep-diff2.puget.printer/format-doc","lambdaisland.deep-diff2.printer-impl/print-insertion","lambdaisland.deep-diff2.printer-impl/print-mismatch","lambdaisland.deep-diff2.printer-impl/print-other","lambdaisland.deep-diff2.printer-impl/map-handler","this","value","ks","G__52605","G__52606","G__52607","fexpr__52604","lambdaisland.deep-diff2.puget.printer/order-collection","cljs.core.partial","cljs.core/sort-by","cljs.core/first","arrangement.core/rank","entries","cljs.core.map","cljs.core.interpose","lambdaisland.deep-diff2.printer-impl/map-entry-handler","k","cljs.core/key","v","cljs.core/val","lambdaisland.deep_diff2.diff_impl/Insertion","cljs.core/coll?","lambdaisland.deep_diff2.diff_impl/Deletion","lambdaisland.deep-diff2.printer-impl/print-handlers","cljs.core.atom","lambdaisland.deep-diff2.printer-impl/type-name","x","t","cljs.core/type","n","cljs.core/empty?","cljs.core.symbol","cljs.core.pr_str","lambdaisland.deep-diff2.printer-impl/print-handler-resolver","extra-handlers","obj","and__4115__auto__","cljs.core.get","cljs.core/deref","cljs.core.merge","lambdaisland.deep-diff2.printer-impl/register-print-handler!","type","handler","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__52615","lambdaisland.deep-diff2.printer-impl/puget-printer","js/Error","lambdaisland.deep_diff2.printer_impl.puget_printer","opts","lambdaisland.deep-diff2.puget.printer/pretty-printer","or__4126__auto__","cljs.core/*print-length*","lambdaisland.deep-diff2.puget.dispatch/chained-lookup","lambdaisland.deep-diff2.puget.printer/common-handlers","cljs.core.dissoc","lambdaisland.deep-diff2.printer-impl/format-doc","lambdaisland.deep-diff2.printer-impl/print-doc","doc","fipp.engine.pprint_document"],"sourcesContent":["(ns lambdaisland.deep-diff2.printer-impl\n  (:require [arrangement.core]\n            [fipp.engine :as fipp]\n            [lambdaisland.deep-diff2.diff-impl :as diff]\n            [lambdaisland.deep-diff2.puget.color :as color]\n            [lambdaisland.deep-diff2.puget.dispatch :as dispatch]\n            [lambdaisland.deep-diff2.puget.printer :as puget-printer]\n            #?(:cljs [goog.string :refer [format]]))\n  #?(:clj\n     (:import)))\n\n(defn print-deletion [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::deletion [:span \"-\" (puget-printer/format-doc no-color (:- expr))])))\n\n(defn print-insertion [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::insertion [:span \"+\" (puget-printer/format-doc no-color (:+ expr))])))\n\n(defn print-mismatch [printer expr]\n  [:group\n   [:span \"\"] ;; needed here to make this :nest properly in kaocha.report/print-expr '=\n   [:align\n    (print-deletion printer expr) :line\n    (print-insertion printer expr)]])\n\n(defn print-other [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::other [:span \"-\" (puget-printer/format-doc no-color expr)])))\n\n(defn- map-handler [this value]\n  (let [ks (#'puget-printer/order-collection (:sort-keys this) value (partial sort-by first arrangement.core/rank))\n        entries (map (partial puget-printer/format-doc this) ks)]\n    [:group\n     (color/document this :delimiter \"{\")\n     [:align (interpose [:span (:map-delimiter this) :line] entries)]\n     (color/document this :delimiter \"}\")]))\n\n(defn- map-entry-handler [printer value]\n  (let [k (key value)\n        v (val value)]\n    (let [no-color (assoc printer :print-color false)]\n      (cond\n        (instance? lambdaisland.deep_diff2.diff_impl.Insertion k)\n        [:span\n         (print-insertion printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (color/document printer ::insertion (puget-printer/format-doc no-color v))]\n\n        (instance? lambdaisland.deep_diff2.diff_impl.Deletion k)\n        [:span\n         (print-deletion printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (color/document printer ::deletion (puget-printer/format-doc no-color v))]\n\n        :else\n        [:span\n         (puget-printer/format-doc printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (puget-printer/format-doc printer v)]))))\n\n(def print-handlers\n  (atom #?(:clj\n           {'lambdaisland.deep_diff2.diff_impl.Deletion\n            print-deletion\n\n            'lambdaisland.deep_diff2.diff_impl.Insertion\n            print-insertion\n\n            'lambdaisland.deep_diff2.diff_impl.Mismatch\n            print-mismatch\n\n            'clojure.lang.PersistentArrayMap\n            map-handler\n\n            'clojure.lang.PersistentHashMap\n            map-handler\n\n            'clojure.lang.MapEntry\n            map-entry-handler}\n\n           :cljs\n           {'lambdaisland.deep-diff2.diff-impl/Deletion\n            print-deletion\n\n            'lambdaisland.deep-diff2.diff-impl/Insertion\n            print-insertion\n\n            'lambdaisland.deep-diff2.diff-impl/Mismatch\n            print-mismatch\n\n            'cljs.core/PersistentArrayMap\n            map-handler\n\n            'cljs.core/PersistentHashMap\n            map-handler\n\n            'cljs.core/MapEntry\n            map-entry-handler})))\n\n(defn type-name\n  \"Get the type of the given object as a string. For Clojure, gets the name of\n  the class of the object. For ClojureScript, gets either the `name` attribute\n  or the protocol name if the `name` attribute doesn't exist.\"\n  [x]\n  #?(:clj\n     (symbol (.getName (class x)))\n     :cljs\n     (let [t (type x)\n           n (.-name t)]\n       (if (empty? n)\n         (symbol (pr-str t))\n         (symbol n)))))\n\n(defn- print-handler-resolver [extra-handlers]\n  (fn [obj]\n    (and obj (get (merge @print-handlers extra-handlers)\n                  (symbol (type-name obj))))))\n\n(defn register-print-handler!\n  \"Register an extra print handler.\n\n  `type` must be a symbol of the fully qualified class name. `handler` is a\n  Puget handler function of two arguments, `printer` and `value`.\"\n  [type handler]\n  (swap! print-handlers assoc type handler))\n\n(defn puget-printer\n  ([]\n   (puget-printer {}))\n  ([opts]\n   (let [extra-handlers (:extra-handlers opts)]\n     (puget-printer/pretty-printer (merge {:width          (or *print-length* 100)\n                                           :print-color    true\n                                           :color-scheme   {::deletion  [:red]\n                                                            ::insertion [:green]\n                                                            ::other     [:yellow]\n                                                            ;; lambdaisland.deep-diff2.puget uses green and red for\n                                                            ;; boolean/tag, but we want to reserve\n                                                            ;; those for diffed values.\n                                                            :boolean    [:bold :cyan]\n                                                            :tag        [:magenta]}\n                                           :print-handlers  (dispatch/chained-lookup\n                                                             (print-handler-resolver extra-handlers)\n                                                             puget-printer/common-handlers)}\n                                          (dissoc opts :extra-handlers))))))\n\n(defn format-doc [expr printer]\n  (puget-printer/format-doc printer expr))\n\n(defn print-doc [doc printer]\n  (fipp.engine/pprint-document doc {:width (:width printer)}))\n"]}