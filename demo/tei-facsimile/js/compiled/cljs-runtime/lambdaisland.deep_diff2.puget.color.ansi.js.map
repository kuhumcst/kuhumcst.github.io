{"version":3,"sources":["lambdaisland/deep_diff2/puget/color/ansi.cljc"],"mappings":";AASA;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AA8BL;;;;AAAA,AAAMC,AAGHC;AAHH,AAIE,AAAMA,AAAM,AAACC,AAAIH,AAASE,AAAMA;AAC1BA,AAAM,AAAA,AAACE,AAAYF;AADzB,AAEE,AAAA,AAAA,AAAA,AAAeA;;AAEnB,AAAA;;;AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAEDT;AAFL,AAGE,AAACD,AAAIC;;;AAHP,AAAA,AAAA,AAAMS;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAKA,AAAA;;;;AAAA,AAAAP,AAAMU;AAAN,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAAN;;;AAAA,AAAA,AAAA,AAAA,AAAMM,AAGHM,AAASnB;AAHZ,AAIE,AAAK,AAACD,AAAIC,AAAOmB,AAAO,AAAA,AAACC;;;AAJ3B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;AAAA,AAAMO,AAEHF;AAFH,AAGE,AAAA,AAAA,AAACG,AAAYH;;AAEf,AAAAI,AAAA,AAAA,AACGC,AAAQC,AAAQC;AADnB,AAEE,AAAAC,AAAe,AAAIH,AAAsB,AAAA,AAAA,AAACI,AAAIH,AAASb;AAAvD,AAAA,AAAAe;AAAA,AAAAA,AAAS3B;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgB,AAACD,AAAIC,AAAQ0B,AAAgB,AAAA,AAACN;;AAC5CM;;;AAEJ,AAAAG,AAAA,AAAA,AACGL,AAAQC,AAAQK;AADnB,AAEE,AAAAH,AAAe,AAAIH,AAAsB,AAAA,AAAA,AAACI,AAAIH,AAASb;AAAvD,AAAA,AAAAe;AAAA,AAAAA,AAAS3B;AAAT,AACE,AAAK,AAACD,AAAIC,AAAO8B,AAAK,AAAA,AAACV;;AACvBU","names":["lambdaisland.deep-diff2.puget.color.ansi/sgr-code","lambdaisland.deep-diff2.puget.color.ansi/esc","codes","cljs.core.map","clojure.string.join","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","lambdaisland.deep-diff2.puget.color.ansi/escape","seq51362","self__4724__auto__","cljs.core/seq","lambdaisland.deep-diff2.puget.color.ansi/sgr","seq51376","G__51377","cljs.core/first","cljs.core/next","self__4723__auto__","string","lambdaisland.deep_diff2.puget.color.ansi.escape","lambdaisland.deep-diff2.puget.color.ansi/strip","clojure.string/replace","lambdaisland.deep-diff2.puget.color/document","options","element","document","temp__5733__auto__","cljs.core.get","lambdaisland.deep-diff2.puget.color/text","text"],"sourcesContent":["(ns lambdaisland.deep-diff2.puget.color.ansi\n  \"Coloring implementation that applies ANSI color codes to text designed to be\n  output to a terminal.\n\n  Use with a `:color-markup` of `:ansi`.\"\n  (:require\n    [clojure.string :as str]\n    [lambdaisland.deep-diff2.puget.color :as color]))\n\n(def sgr-code\n  \"Map of symbols to numeric SGR (select graphic rendition) codes.\"\n  {:none        0\n   :bold        1\n   :underline   3\n   :blink       5\n   :reverse     7\n   :hidden      8\n   :strike      9\n   :black      30\n   :red        31\n   :green      32\n   :yellow     33\n   :blue       34\n   :magenta    35\n   :cyan       36\n   :white      37\n   :fg-256     38\n   :fg-reset   39\n   :bg-black   40\n   :bg-red     41\n   :bg-green   42\n   :bg-yellow  43\n   :bg-blue    44\n   :bg-magenta 45\n   :bg-cyan    46\n   :bg-white   47\n   :bg-256     48\n   :bg-reset   49})\n\n(defn esc\n  \"Returns an ANSI escope string which will apply the given collection of SGR\n  codes.\"\n  [codes]\n  (let [codes (map sgr-code codes codes)\n        codes (str/join \\; codes)]\n    (str \\u001b \\[ codes \\m)))\n\n(defn escape\n  \"Returns an ANSI escope string which will enact the given SGR codes.\"\n  [& codes]\n  (esc codes))\n\n(defn sgr\n  \"Wraps the given string with SGR escapes to apply the given codes, then reset\n  the graphics.\"\n  [string & codes]\n  (str (esc codes) string (escape :none)))\n\n(defn strip\n  \"Removes color codes from the given string.\"\n  [string]\n  (str/replace string #\"\\u001b\\[[0-9;]*[mK]\" \"\"))\n\n(defmethod color/document :ansi\n  [options element document]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    [:span [:pass (esc codes)] document [:pass (escape :none)]]\n    document))\n\n(defmethod color/text :ansi\n  [options element text]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    (str (esc codes) text (escape :none))\n    text))\n"]}