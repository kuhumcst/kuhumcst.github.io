{"version":3,"sources":["kuhumcst/rescope/hiccup.cljs"],"mappings":"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","names":["p__56616","vec__56617","cljs.core.nth","kuhumcst.rescope.hiccup/trim-str","node","_","loc","clojure.string/blank?","clojure.zip/remove","p__56624","vec__56625","kuhumcst.rescope.hiccup/remove-comment","clojure.string/starts-with?","clojure.string/ends-with?","kuhumcst.rescope.hiccup/as-data-*","attr","cljs.core.into","iter__4529__auto__","s__56635","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__56637","cljs.core/chunk-buffer","i__56636","vec__56645","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56634","cljs.core/chunk-rest","vec__56661","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","kuhumcst.rescope.util/data-*","p__56675","vec__56677","vec__56680","seq__56681","first__56682","cljs.core/next","kuhumcst.rescope.hiccup/attr->data-attr","tag","content","cljs.core/map?","clojure.zip.edit","cljs.core/assoc","p__56692","vec__56700","vec__56703","seq__56704","first__56705","kuhumcst.rescope.hiccup/rename-attr","kmap","clojure.set/rename-keys","kuhumcst.rescope.hiccup/assoc-meta","o","cljs.core/with-meta","cljs.core.assoc","cljs.core/meta","p__56729","vec__56731","vec__56734","seq__56735","first__56736","kuhumcst.rescope.hiccup/inject","injector","temp__5733__auto__","comp","kuhumcst.rescope.core/shadow-ref","p__56738","vec__56740","kuhumcst.rescope.hiccup/add-prefix","prefix","cljs.core/name","new-tag","kuhumcst.rescope.util/prefixed","p__56747","vec__56750","vec__56753","seq__56754","first__56755","kuhumcst.rescope.hiccup/meta-into-attr","m","cljs.core/update","cljs.core/merge","p__56757","vec__56758","kuhumcst.rescope.hiccup/edit-leaf","kuhumcst.rescope.hiccup/edit-branch","attr-kmap","p__56767","vec__56768","vec__56771","seq__56772","first__56773","kuhumcst.rescope.hiccup/ignore?","cljs.core/vector?","cljs.core._EQ_","var_args","G__56789","kuhumcst.rescope.hiccup/postprocess","js/Error","p__56799","map__56800","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hiccup","cljs.core/constantly","opts","postprocess*","p__56808","vec__56809","hickory.zip/hiccup-zip","clojure.zip/end?","clojure.zip/root","clojure.zip/next","kuhumcst.rescope.hiccup.postprocess","cljs.core/chunk-first"],"sourcesContent":["(ns kuhumcst.rescope.hiccup\n  \"Conform hiccup and inject reagent components into shadow roots.\"\n  (:require [clojure.string :as str]\n            [clojure.set :as set]\n            [clojure.zip :as zip]\n            [hickory.zip :as hzip]\n            [kuhumcst.rescope.util :as util]\n            [kuhumcst.rescope.core :as rescope]))\n\n(defn- trim-str\n  \"Remove any blank strings from a string node `loc`.\"\n  [[node _ :as loc]]\n  (if (str/blank? node)\n    (zip/remove loc)\n    loc))\n\n(defn- remove-comment\n  \"Remove any strings converted from XML comments from a string node `loc`.\"\n  [[node _ :as loc]]\n  (if (and (str/starts-with? node \"<!--\")\n           (str/ends-with? node \"-->\"))\n    (zip/remove loc)\n    loc))\n\n(defn- as-data-*\n  [attr]\n  (into {} (for [[k v] attr]\n             [(keyword (util/data-* k)) v])))\n\n(defn- attr->data-attr\n  \"Convert all attributes into data-* attributes.\"\n  [[[tag attr & content :as node] _ :as loc]]\n  (if (map? attr)\n    (zip/edit loc assoc 1 (as-data-* attr))\n    loc))\n\n(defn- rename-attr\n  \"Rename attr keys according to `kmap`.\"\n  [kmap [[tag attr & content :as node] _ :as loc]]\n  (if (map? attr)\n    (zip/edit loc assoc 1 (set/rename-keys attr (as-data-* kmap)))\n    loc))\n\n(defn- assoc-meta\n  [o k v]\n  (with-meta o (assoc (meta o) k v)))\n\n;; Only modifies metadata. Later this is merged into attr by meta-into-attr.\n(defn- inject\n  \"Insert shadow roots with components based on matches from `injector`.\"\n  [injector [[tag attr & content :as node] _ :as loc]]\n  (if-let [comp (injector node)]\n    (zip/edit loc assoc-meta :ref (rescope/shadow-ref comp))\n    loc))\n\n(defn- add-prefix\n  \"Transform a hiccup vector node `loc` to a valid custom element name by\n  setting a custom `prefix`.\"\n  [prefix [node _ :as loc]]\n  (let [tag     (name (first node))\n        new-tag (keyword (util/prefixed prefix tag))]\n    (zip/edit loc assoc 0 new-tag)))\n\n(defn- meta-into-attr\n  \"Merge the element metadata into the attr. Mimics the behaviour of reagent.\"\n  [[[tag attr & content :as node] _ :as loc]]\n  (if-let [m (meta node)]\n    (zip/edit loc update 1 merge m)\n    loc))\n\n(defn- edit-leaf\n  [[node _ :as loc]]\n  (if (string? node)\n    (->> loc\n         (trim-str)\n         (remove-comment))\n    loc))\n\n;; NOTE: all edits *must* preserve node metadata!\n(defn- edit-branch\n  [prefix attr-kmap injector loc]\n  (->> loc\n       (inject injector)\n       (attr->data-attr)\n       (rename-attr attr-kmap)                              ; TODO: remove?\n       (add-prefix prefix)\n       (meta-into-attr)))\n\n(defn- ignore?\n  \"Return true if it makes sense to ignore this loc.\"\n  [[[tag attr & content :as node] _ :as loc]]\n  (and (vector? node)\n       (= tag :<>)))                                        ; React fragments\n\n(defn postprocess\n  \"Process relevant nodes of a zipper made from a `hiccup` tree based on `opts`.\n  Return the transformed structure as valid HTML with shadow DOM injections.\n\n  The hiccup structure is trimmed and the `prefix` is applied to all element\n  tags in the tree. Attributes are renamed according to `attr-kmap` or converted\n  into the data-* format. Finally, shadow roots are inserted based on the\n  `injector`, the HTML now being rendered by replacement components.\"\n  ([hiccup {:keys [prefix attr-kmap injector]\n            :or   {prefix    \"rescope\"\n                   attr-kmap {}\n                   injector  (constantly nil)}\n            :as   opts}]\n   ;; The way hiccup zips, every branch is a hiccup vector, while everything\n   ;; else is a leaf. Leafs are strings, but can be other types too.\n   (let [postprocess* (fn [[node _ :as loc]]\n                        (if (vector? node)\n                          (edit-branch prefix attr-kmap injector loc)\n                          (edit-leaf loc)))]\n     (loop [loc (hzip/hiccup-zip hiccup)]\n       (if (zip/end? loc)\n         (zip/root loc)\n         (recur (zip/next (if (ignore? loc)\n                            loc\n                            (postprocess* loc))))))))\n  ([hiccup]\n   (postprocess hiccup nil)))\n"]}