{"version":3,"sources":["recap/widgets/tabs.cljc"],"mappings":"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","names":["p__52208","map__52209","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","recap.widgets.tabs/mk-drag-state","kvs","i","n","recap.util/vec-dissoc","cljs.core._EQ_","x__4217__auto__","y__4218__auto__","cljs.core/count","p__52245","map__52246","recap.widgets.tabs/mk-drop-state","kv","recap.util/vec-assoc","cljs.core/meta","x__4214__auto__","y__4215__auto__","recap.widgets.tabs/mk-tab-id","parent-id","recap.widgets.tabs/mk-tab-panel-id","recap.widgets.tabs/heterostyled","backgrounds","cljs.core/cycle","cljs.core/shuffle","mk-style","m","cljs.core.assoc","cljs.core.nth","cljs.core.into","cljs.core/empty","cljs.core.map_indexed","cljs.core.vary_meta","p__52278","p__52279","map__52280","map__52281","recap.widgets.tabs/tab-list","state","id","opts","recap.state/assert-valid","map__52297","cljs.core/deref","length","append","cljs.core.swap_BANG_","recap.dom.keyboard/roving-tabindex-handler","recap.dom.drag/on-drag-enter","recap.dom.drag/on-drag-over","recap.dom.drag/on-drag-leave","recap.dom.drag/on-drop","iter__4529__auto__","s__52301","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__52303","cljs.core/chunk-buffer","i__52302","cljs.core/-nth","vec__52326","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52300","cljs.core/chunk-rest","cljs.core/first","vec__52358","cljs.core/cons","cljs.core/rest","cljs.core.range","k","_","selected?","tab-id","delete","cljs.core/assoc","insert","select","cljs.core/hash","recap.dom.focus/accept!","recap.dom.drag/on-drag-start","recap.dom.drag/on-drag-end","p__52410","p__52411","map__52412","map__52413","recap.widgets.tabs/tab-panel","map__52421","vec__52422","v","cljs.core/not-empty","p__52444","p__52445","map__52449","map__52450","recap.widgets.tabs/tabs","cljs.core/chunk-first"],"sourcesContent":["(ns recap.widgets.tabs\n  \"Reagent components for creating a tabbed UI.\n\n  Shared state for tab components:\n    :kvs - key-value pairs of tab labels and bodies.\n    :i   - (optional) the index of the currently selected tab.\n\n  Various opts for tab components:\n    :id - a unique id attribute for the tab-list.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel\"\n  (:require [recap.dom.focus :as focus]\n            [recap.dom.drag :as drag]\n            [recap.dom.keyboard :as kbd]\n            [recap.state :as state]\n            [recap.util :as util]))\n\n(defn- mk-drag-state\n  [{:keys [kvs i] :or {i 0}} n]\n  {:kvs (util/vec-dissoc kvs n)\n   :i   (cond\n          (= n i) (min i (- (count kvs) 2))                 ; go right\n          (< n i) (dec i)                                   ; go left\n          (> n i) i)})                                      ; stay in place\n\n(defn- mk-drop-state\n  [{:keys [kvs i] :or {i 0}} n kv]\n  {:kvs (util/vec-assoc kvs n kv)\n   :i   (cond\n          (:selected? (meta kv)) n                          ; go to dropped kv\n          (= n i) (inc i)                                   ; go right\n          (< n i) (inc i)                                   ; go right\n          (> n i) (max 0 i))})                              ; stay in place\n\n(defn- mk-tab-id\n  [parent-id n]\n  (str parent-id \"-\" n))\n\n(defn- mk-tab-panel-id\n  [parent-id]\n  (str parent-id \"-tabpanel\"))\n\n(defn heterostyled\n  \"Apply heterogeneous styling to tab `kvs`.\"\n  [kvs]\n  (let [backgrounds (cycle (shuffle [\"var(--tab-background-1)\"\n                                     \"var(--tab-background-2)\"\n                                     \"var(--tab-background-3)\"\n                                     \"var(--tab-background-4)\"\n                                     \"var(--tab-background-5)\"\n                                     \"var(--tab-background-6)\"]))\n        mk-style    (fn [m n]\n                      (assoc m :style {:background (nth backgrounds n)}))]\n    (into (empty kvs)\n          (map-indexed (fn [n kv]\n                         (vary-meta kv mk-style n))\n                       kvs))))\n\n(defn tab-list\n  \"The tabs available in the `state`.\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  (state/assert-valid state ::state/kvs+i)\n  (let [{:keys [kvs i] :or {i 0}} @state\n        length (count kvs)\n        append (fn [kv]\n                 ;; Internal drops will have no increase in tab count, so when\n                 ;; appending inside the same tab-list we must account for it.\n                 (if (= id (:id (meta kv)))\n                   (swap! state mk-drop-state (dec length) kv)\n                   (swap! state mk-drop-state length kv)))]\n    [:div.tab-list {:role          \"tablist\"\n                    :aria-label    \"Choose a tab to display\" ;TODO: localisation\n                    :id            id\n                    :on-key-down   kbd/roving-tabindex-handler\n                    :on-drag-enter (drag/on-drag-enter)\n                    :on-drag-over  (drag/on-drag-over)\n                    :on-drag-leave (drag/on-drag-leave)\n                    :on-drop       (drag/on-drop append)}\n     (for [n (range length)\n           :let [[k _ :as kv] (nth kvs n)\n                 selected? (= n i)\n                 tab-id    (mk-tab-id id n)\n                 delete    (fn []\n                             (swap! state mk-drag-state n)\n                             (vary-meta kv assoc\n                                        :id id\n                                        :selected? selected?))\n                 insert    (fn [kv]\n                             (swap! state mk-drop-state n kv))\n                 select    (fn []\n                             (swap! state assoc :i n))]]\n       ;; Would prefer using button, but FF excludes its padding from drag area.\n       [:span.tab {:role          \"tab\"\n                   :key           (hash [kvs i n])\n                   :id            tab-id\n                   :ref           focus/accept!\n                   :style         (:style (meta kv))\n                   :aria-selected selected?\n                   :aria-controls (mk-tab-panel-id id)\n                   :aria-label    (str \"View tab number \" (inc n)) ;TODO: localisation\n                   :tab-index     (if selected? \"0\" \"-1\")\n                   :auto-focus    selected?\n                   :on-click      select\n                   :draggable     true\n                   :on-drag-start (drag/on-drag-start delete)\n                   :on-drag-end   (drag/on-drag-end)\n                   :on-drag-enter (drag/on-drag-enter)\n                   :on-drag-over  (drag/on-drag-over)\n                   :on-drag-leave (drag/on-drag-leave)\n                   :on-drop       (drag/on-drop insert)}\n        k])]))\n\n(defn tab-panel\n  \"The currently selected tab-panel of the `state`.\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  (state/assert-valid state ::state/kvs+i)\n  (let [{:keys [kvs i] :or {i 0}} @state\n        [_ v :as kv] (when (not-empty kvs)\n                       (nth kvs i))]\n    (when v\n      [:section.tab-panel {:role            \"tabpanel\"\n                           :id              (mk-tab-panel-id id)\n                           :aria-labelledby (mk-tab-id id i)\n                           :style           (:style (meta kv))}\n       v])))\n\n(defn tabs\n  \"Merged view of the tab-list and the tab-panel of the currently selected tab.\n  Takes `state` of the form described in the docstring of this namespace.\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  [:article.tabs\n   [tab-list state opts]\n   [tab-panel state opts]])\n"]}