{"version":3,"sources":["recap/dom/drag.cljc"],"mappings":";AAOA;;;AAAKA,AAEH,AAAA,AAACC;AAEH;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAKC;AAAL,AACE,AAAMC,AAAS,AAAK,AAACC,AAAKH;AACpBI,AAAS,AAAgBH;AACzBI,AAAS,AAAUJ;AACnBK,AAAS,AAAA,AAAG,AAAeD;AAC3BE,AAAS,AAAA,AAAG,AAAgBF;AAC5BG,AAAS,AAAA,AAAYH;AAL3B,AAME,AAAA,AAAA,AAAA,AAACI,AAAMZ,AAASa,AAAMR,AAAkBF,AACAQ;;AAExC,AAAA,AAAM,AAAiBJ;;AACvB,AAAA,AAAM,AAAcA;;AACpB,AAAA,AAAUA,AAAQF;;AAGlB,AAAA,AAAM,AAAaM;;AACnB,AAAA,AAAA,AAAeA;;AACf,AAACG,AAA6BH;;AAC9B,AAAeJ,AAAGI,AAAMF,AAASC;;AAOjC,AAACK,AACC;AAAA,AACE,AAAA,AAACC,AAAsB,AAAcR;;AACrC,AAAA,AAACQ,AAAsBR;AAH3B;;;AAON,AAAA,AAAMS;AAAN,AAEE,AAAKb;AAAL,AACE,AAAA,AAACc,AAAyB,AAAc,AAAUd;;AAClD,AAAA,AAACc,AAAyB,AAAUd;;;AAGxC,AAAA,AAAMe;AAAN,AAEE,AAAKf;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAM,AAAA,AAAAA;;;AAEV,AAAA,AAAMgB;AAAN,AAEE,AAAKhB;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAACY,AAAsB,AAAUZ;;;AAErC,AAAA,AAAMiB;AAAN,AAEE,AAAKjB;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAACc,AAAyB,AAAUd;;;AAExC;;;;AAAA,AAAMkB,AAGHC;AAHH,AAIE,AAAKnB;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAACc,AAAyB,AAAUd;;AACpC,AAAMC,AAAQ,AAAA,AAAU,AAAgBD;AAAxCoB,AAC8B,AAAA,AAAAK,AAACD,AAAK5B,AAASK;AAD7CmB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcrB;AADd,AAAAyB,AAAAJ,AAAA,AACsBb;AADtB,AAEE,AAAMR;AAAN,AACE,AAACS,AAAMZ,AAAS8B,AAAOzB;;AACvB,AAAA0B,AAAS,AAAC5B,AAAAA,AAAAA;AAAV,AAAA,AAAA4B,AAAAA,AAACR,AAAAA,AAAAA;;AACD,AAAc,AAAcZ,AAAOA;;AAHrC","names":["recap.dom.drag/drag-fns","cljs.core.atom","recap.dom.drag/on-drag-start","drag-fn","e","drag-id","cljs.core/hash","dt","element","x-offset","y-offset","ghost","cljs.core.swap_BANG_","cljs.core/assoc","js/document.body.appendChild","js/setTimeout","recap.dom.interop/add-modifier!","recap.dom.drag/on-drag-end","recap.dom.interop/remove-modifier!","recap.dom.drag/on-drag-over","recap.dom.drag/on-drag-enter","recap.dom.drag/on-drag-leave","recap.dom.drag/on-drop","drop-fn","map__47890","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","cljs.core/dissoc","G__47900"],"sourcesContent":["(ns recap.dom.drag\n  \"A functional take on drag-and-drop.\n\n  All successful drops execute the code `(drop-fn (drag-fn))` in order\n  to effectuate the necessary state changes.\"\n  (:require [recap.dom.interop :as interop]))\n\n(def drag-fns\n  \"Temporary storage for drag-fns.\"\n  (atom {}))\n\n(defn on-drag-start\n  \"The `drag-fn` is called with no args on a successful drop.\"\n  [drag-fn]\n  (fn [e]\n    (let [drag-id  (str (hash drag-fn))\n          dt       (.-dataTransfer e)\n          element  (.-target e)\n          x-offset (/ (.-offsetWidth element) 2)\n          y-offset (/ (.-offsetHeight element) 2)\n          ghost    (.cloneNode element true)]\n      (swap! drag-fns assoc drag-id {:drag-fn drag-fn\n                                     :ghost   ghost})\n      ;; TODO: what about other effects, i.e. copy?\n      (set! (.-effectAllowed dt) \"move\")\n      (set! (.-dropEffect dt) \"move\")\n      (.setData dt \"fn\" drag-id)\n\n      ;; The ghost is so we can differentiate source and the drag image styling.\n      (.add (.-classList ghost) \"--ghost\")\n      (.setAttribute ghost \"aria-hidden\" \"true\")\n      (js/document.body.appendChild ghost)\n      (.setDragImage dt ghost x-offset y-offset)\n\n      ;; Modifying a dragged element after an onDragStart event will glitch both\n      ;; Chrome and Safari, making this slight delay necessary. Firefox is OK.\n      ;; The drag-parent modifier class is also necessary to disable :hover\n      ;; effects. Chrome seems to otherwise temporarily remove the DOM element,\n      ;; triggering :hover on the element to the right.\n      (js/setTimeout\n        (fn []\n          (interop/add-modifier! (.-parentNode element) \"drag-parent\")\n          (interop/add-modifier! element \"drag\"))\n        100))))\n\n;; TODO: does not fire when the drag is internal - fix!\n(defn on-drag-end\n  []\n  (fn [e]\n    (interop/remove-modifier! (.-parentNode (.-target e)) \"drag-parent\")\n    (interop/remove-modifier! (.-target e) \"drag\")))\n\n;; The onDragOver handler is needed for drag-and-drop to work.\n(defn on-drag-over\n  []\n  (fn [e]\n    (.preventDefault e)\n    (set! e.dataTransfer.dropEffect \"move\")))\n\n(defn on-drag-enter\n  []\n  (fn [e]\n    (.preventDefault e)\n    (interop/add-modifier! (.-target e) \"drag-over\")))\n\n(defn on-drag-leave\n  []\n  (fn [e]\n    (.preventDefault e)\n    (interop/remove-modifier! (.-target e) \"drag-over\")))\n\n(defn on-drop\n  \"The `drop-fn` is called with the drag-fn's output as its input on a\n  successful drop.\"\n  [drop-fn]\n  (fn [e]\n    (.preventDefault e)\n    (interop/remove-modifier! (.-target e) \"drag-over\")\n    (let [drag-id (.getData (.-dataTransfer e) \"fn\")\n          {:keys [drag-fn ghost]} (get @drag-fns drag-id)]\n      (when drag-fn\n        (swap! drag-fns dissoc drag-id)\n        (drop-fn (drag-fn))\n        (.removeChild (.-parentNode ghost) ghost)))))\n"]}