{"version":3,"sources":["lambdaisland/deep_diff2/puget/printer.cljc"],"mappings":"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","names":["lambdaisland.deep-diff2.puget.printer/get-type-name","x","t","cljs.core/type","n","cljs.core/empty?","cljs.core.pr_str","lambdaisland.deep-diff2.puget.printer/get-identity-hashcode","o","cljs.core/hash","lambdaisland.deep-diff2.puget.printer/to-hex-string","input-string","lambdaisland.deep-diff2.puget.printer/*options*","lambdaisland.deep-diff2.puget.printer/merge-options","a","b","colors","cljs.core.merge","cljs.core.assoc","var_args","G__52294","lambdaisland.deep-diff2.puget.printer/color-text","js/Error","element","text","lambdaisland.deep_diff2.puget.printer.color_text","options","lambdaisland.deep-diff2.puget.color/text","lambdaisland.deep-diff2.puget.printer/order-collection","mode","coll","sort-fn","cljs.core/sorted?","cljs.core/counted?","cljs.core/count","cljs.core/seq","lambdaisland.deep-diff2.puget.printer/common-key-ns","m","cljs.core/every?","cljs.core.every_pred","cljs.core/keyword?","cljs.core/namespace","cljs.core/keys","vec__52348","cljs.core.nth","nsf","cljs.core/frequencies","cljs.core.map","common","cljs.core.apply","cljs.core/max-key","cljs.core/val","cljs.core.into","cljs.core/empty","p__52362","vec__52366","k","v","e","cljs.core._EQ_","cljs.core.keyword","cljs.core/name","G__52388","lambdaisland.deep-diff2.puget.printer/format-unknown","printer","value","lambdaisland.deep_diff2.puget.printer.format_unknown","repr","tag","sys-id","lambdaisland.deep-diff2.puget.color/document","cljs.core.not_EQ_","cljs.core/List","lambdaisland.deep-diff2.puget.printer/format-doc*","lookup","handler","and__4115__auto__","fipp.visit/visit*","lambdaisland.deep-diff2.puget.printer/format-doc","temp__5733__auto__","metadata","cljs.core/meta","fipp.visit/visit-meta","lambdaisland.deep-diff2.puget.printer/pr-handler","lambdaisland.deep-diff2.puget.printer/unknown-handler","fipp.visit/visit-unknown","lambdaisland.deep-diff2.puget.printer/tagged-handler","value-fn","cljs.core/Symbol","cljs.core.ex_info","cljs.core/ifn?","cljs.core/tagged-literal","lambdaisland.deep-diff2.puget.printer/inst-pattern","lambdaisland.deep-diff2.puget.printer/utc-date","date","js/Date","lambdaisland.deep-diff2.puget.printer/platform-handlers","cljs.core/inst?","p1__52479#","js/goog.i18n.DateTimeFormat","cljs.core/uuid?","cljs.core/str","cljs.core/object?","cljs.core.reduce","goog.object/get","js/Object.keys","p1__52481#","p1__52482#","lambdaisland.deep-diff2.puget.printer/clojure-handlers","cljs.core/PROTOCOL_SENTINEL","cljs.core/deref","doc","cljs.core/realized?","cljs.core/seq?","fipp.visit/visit-seq","p1__52489#","lambdaisland.deep-diff2.puget.printer/clojure-interface-handlers","cljs.core/fn?","vec__52494","seq__52495","first__52496","cljs.core/first","cljs.core/next","vname","tail","clojure.string/replace-first","clojure.string.split","p1__52490#","clojure.string.join","lambdaisland.deep-diff2.puget.printer/common-handlers","lambdaisland.deep_diff2.puget.dispatch.chained_lookup","lambdaisland.deep-diff2.puget.dispatch/predicate-lookup","this__4380__auto__","k__4381__auto__","this__4382__auto__","k52503","else__4383__auto__","G__52513","cljs.core/Keyword","print-handlers","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__52516","vec__52520","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__52502","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this52504","other52505","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__52523","cljs.core/keyword-identical?","expr__52524","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","lambdaisland.deep-diff2.puget.printer/CanonicalPrinter","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__52506","extmap__4419__auto__","G__52536","cljs.core/record?","lambdaisland.deep-diff2.puget.printer/->CanonicalPrinter","lambdaisland.deep-diff2.puget.printer/map->CanonicalPrinter","this","entries","cljs.core.partial","cljs.core.interpose","cljs.core.sort","arrangement.core/rank","p1__52501#","cljs.core/key","cljs.core.sort_by","not-defined-representation-message","G__52538","lambdaisland.deep-diff2.puget.printer/canonical-printer","lambdaisland.deep_diff2.puget.printer.canonical_printer","handlers","k52541","G__52545","width","print-meta","sort-keys","map-delimiter","map-coll-separator","namespace-maps","seq-limit","print-color","color-markup","color-scheme","print-fallback","p__52547","vec__52548","G__52540","this52542","other52543","pred__52551","expr__52552","lambdaisland.deep-diff2.puget.printer/PrettyPrinter","G__52544","G__52575","lambdaisland.deep-diff2.puget.printer/->PrettyPrinter","lambdaisland.deep-diff2.puget.printer/map->PrettyPrinter","vec__52560","values","trimmed?","head","cljs.core.take","elements","G__52563","cljs.core/cons","cljs.core/rest","cljs.core/sort","vec__52567","common-ns","stripped","kvs","or__4126__auto__","cljs.core/sort-by","p__52570","vec__52571","cljs.core/coll?","map-doc","cljs.core.subs","cljs.core.symbol","map__52564","cljs.core/hash-map","form","G__52559","lambdaisland.deep-diff2.puget.printer/pretty-printer","opts","cljs.core/*print-meta*","G__52580","lambdaisland.deep-diff2.puget.printer/render-out","lambdaisland.deep_diff2.puget.printer.render_out","*print-meta*-orig-val__52585","*print-meta*-temp-val__52586","fipp.engine.pprint_document","lambdaisland.deep-diff2.puget.printer/render-str","clojure.string/trim-newline","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__52587","cljs.core/*print-newline*","*print-fn*-orig-val__52588","cljs.core/*print-fn*","*print-newline*-temp-val__52589","*print-fn*-temp-val__52590","x__4668__auto__","G__52594","lambdaisland.deep-diff2.puget.printer/pprint","lambdaisland.deep_diff2.puget.printer.pprint","G__52596","lambdaisland.deep-diff2.puget.printer/pprint-str","lambdaisland.deep_diff2.puget.printer.pprint_str","G__52598","lambdaisland.deep-diff2.puget.printer/cprint","lambdaisland.deep_diff2.puget.printer.cprint","G__52600","lambdaisland.deep-diff2.puget.printer/cprint-str","lambdaisland.deep_diff2.puget.printer.cprint_str"],"sourcesContent":["(ns lambdaisland.deep-diff2.puget.printer\n  \"Enhanced printing functions for rendering Clojure values. The following\n  options are available to control the printer:\n\n  #### General Rendering\n\n  `:width`\n\n  Number of characters to try to wrap pretty-printed forms at.\n\n  `:print-meta`\n\n  If true, metadata will be printed before values. Defaults to the value of\n  `*print-meta*` if unset.\n\n  #### Collection Options\n\n  `:sort-keys`\n\n  Print maps and sets with ordered keys. If true, the pretty printer will sort\n  all unordered collections before printing. If a number, counted collections\n  will be sorted if they are smaller than the given size. Otherwise\n  collections are printed in their natural sort order. Sorted collections are\n  always printed in their natural sort order.\n\n  `:map-delimiter`\n\n  The text placed between key-value pairs in a map.\n\n  `:map-coll-separator`\n\n  The text placed between a map key and a collection value. The keyword :line\n  will cause line breaks if the whole map does not fit on a single line.\n\n  `:namespace-maps`\n\n  Extract common keyword namespaces from maps using the namespace map literal\n  syntax. See `*print-namespace-maps*`.\n\n  `:seq-limit`\n\n  If set to a positive number, then lists will only render at most the first n\n  elements. This can help prevent unintentional realization of infinite lazy\n  sequences.\n\n  #### Color Options\n\n  `:print-color`\n\n  When true, ouptut colored text from print functions.\n\n  `:color-markup`\n\n  :ansi for ANSI color text (the default)\n  :html-inline for inline-styled html\n  :html-classes to use the names of the keys in the :color-scheme map\n  as class names for spans so styling can be specified via CSS.\n\n  `:color-scheme`\n\n  Map of syntax element keywords to color codes.\n\n  #### Type Handling\n\n  `:print-handlers`\n\n  A lookup function which will return a rendering function for a given class\n  type. This will be tried before the built-in type logic. See the\n  `lambdaisland.deep-diff2.puget.dispatch` namespace for some helpful constructors. The returned\n  function should accept the current printer and the value to be rendered\n  returning a format document.\n\n  `:print-fallback`\n\n  Keyword argument specifying how to format unknown values. Puget supports a few\n  different options:\n\n  - `:pretty` renders values with the default colored representation.\n  - `:print` defers to the standard print method by rendering unknown values\n    using `pr-str`.\n  - `:error` will throw an exception when types with no defined handler are\n    encountered.\n  - A function value will be called with the current printer options and the\n    unknown value and is expected to return a formatting document representing\n    it.\n  \"\n  (:require [arrangement.core :as order]\n            [clojure.string :as str]\n            [fipp.engine :as fe]\n            [fipp.visit :as fv]\n            [lambdaisland.deep-diff2.puget.color :as color]\n            [lambdaisland.deep-diff2.puget.color.ansi]\n            [lambdaisland.deep-diff2.puget.color.html]\n            [lambdaisland.deep-diff2.puget.dispatch :as dispatch]\n            #?(:cljs [goog.object :as gobj]))\n  (:import #?@(:clj [(java.text SimpleDateFormat)\n                     (java.util TimeZone)\n                     (java.sql Timestamp)]\n               :cljs [(goog.i18n DateTimeFormat)])))\n\n(defn get-type-name\n  \"Get the type of the given object as a string. For Clojure, gets the name of\n  the class of the object. For ClojureScript, gets either the `name` attribute\n  or the protocol name if the `name` attribute doesn't exist.\"\n  [x]\n  #?(:clj (.getName (class x))\n     :cljs (let [t (type x)\n                 n (.-name t)]\n             (if (empty? n)\n               (pr-str t)\n               n))))\n\n(defn get-identity-hashcode\n  \"Get the hashcode for a given object o\"\n  [o]\n  #?(:clj (System/identityHashCode o)\n     :cljs (hash o)))\n\n(defn to-hex-string\n  \"Returns a hex representation of input-string\"\n  [input-string]\n  #?(:clj (Integer/toHexString input-string)\n     :cljs (.toString input-string 16)))\n\n;; ## Control Vars\n(def ^:dynamic *options*\n  \"Default options to use when constructing new printers.\"\n  {:width 80\n   :sort-keys 80\n   :map-delimiter \",\"\n   :map-coll-separator \" \"\n   :namespace-maps false\n   :print-fallback :pretty\n   :print-color false\n   :color-markup :ansi\n   :color-scheme\n   {;; syntax elements\n    :delimiter [:bold :red]\n    :tag       [:red]\n\n    ;; primitive values\n    :nil       [:bold :black]\n    :boolean   [:green]\n    :number    [:cyan]\n    :string    [:bold :magenta]\n    :character [:bold :magenta]\n    :keyword   [:bold :yellow]\n    :symbol    nil\n\n    ;; special types\n    :function-symbol [:bold :blue]\n    :class-delimiter [:blue]\n    :class-name      [:bold :blue]}})\n\n(defn merge-options\n  \"Merges maps of printer options, taking care to combine the color scheme\n  correctly.\"\n  [a b]\n  (let [colors (merge (:color-scheme a) (:color-scheme b))]\n    (assoc (merge a b) :color-scheme colors)))\n\n(defmacro with-options\n  \"Executes the given expressions with a set of options merged into the current\n  option map.\"\n  [opts & body]\n  `(binding [*options* (merge-options *options* ~opts)]\n     ~@body))\n\n(defmacro with-color\n  \"Executes the given expressions with colored output enabled.\"\n  [& body]\n  `(with-options {:print-color true}\n     ~@body))\n\n(defn color-text\n  \"Produces text colored according to the active color scheme. This is mostly\n  useful to clients which want to produce output which matches data printed by\n  Puget, but which is not directly printed by the library. Note that this\n  function still obeys the `:print-color` option.\"\n  ([element text]\n   (color-text *options* element text))\n  ([options element text]\n   (color/text options element text)))\n\n;; ## Formatting Methods\n(defn- order-collection\n  \"Takes a sequence of entries and checks the mode to determine whether to sort\n  them. Returns an appropriately ordered sequence.\"\n  [mode coll sort-fn]\n  (if (and (not (sorted? coll))\n           (or (true? mode)\n               (and (number? mode)\n                    (counted? coll)\n                    (>= mode (count coll)))))\n    (sort-fn coll)\n    (seq coll)))\n\n\n(defn- common-key-ns\n  \"Extract a common namespace from the keys in the map. Returns a tuple of the\n  ns string and the stripped map, or nil if the keys are not keywords or there\n  is no sufficiently common namespace.\"\n  [m]\n  (when (every? (every-pred keyword? namespace) (keys m))\n    (let [nsf (frequencies (map namespace (keys m)))\n          [common n] (apply max-key val nsf)]\n      (when (< (/ (count m) 2) n)\n        [common\n         (into (empty m)\n               (map (fn strip-common\n                      [[k v :as e]]\n                      (if (= common (namespace k))\n                        [(keyword (name k)) v]\n                        e)))\n               m)]))))\n\n(defn format-unknown\n  \"Renders common syntax doc for an unknown representation of a value.\"\n  ([printer value]\n   (format-unknown printer value (str value)))\n  ([printer value repr]\n   (format-unknown printer value (get-type-name value) repr))\n  ([printer value tag repr]\n   (let [sys-id (to-hex-string (get-identity-hashcode value))]\n     [:span\n      (color/document printer :class-delimiter \"#<\")\n      (color/document printer :class-name tag)\n      (color/document printer :class-delimiter \"@\")\n      sys-id\n      (when (not= repr (str tag \"@\" sys-id))\n        (list \" \" repr))\n      (color/document printer :class-delimiter \">\")])))\n\n(defn format-doc*\n  \"Formats a document without considering metadata.\"\n  [printer value]\n  (let [lookup (:print-handlers printer)\n        handler (and lookup (lookup value))]\n    (if handler\n      (handler printer value)\n      (fv/visit* printer value))))\n\n(defn format-doc\n  \"Recursively renders a print document for the given value.\"\n  [printer value]\n  (if-let [metadata (meta value)]\n    (fv/visit-meta printer metadata value)\n    (format-doc* printer value)))\n\n;; ## Type Handlers\n(defn pr-handler\n  \"Print handler which renders the value with `pr-str`.\"\n  [printer value]\n  (pr-str value))\n\n(defn unknown-handler\n  \"Print handler which renders the value using the printer's unknown type logic.\"\n  [printer value]\n  (fv/visit-unknown printer value))\n\n(defn tagged-handler\n  \"Generates a print handler function which renders a tagged-literal with the\n  given tag and a value produced by calling the function.\"\n  [tag value-fn]\n  (when-not (symbol? tag)\n    (throw (ex-info (str \"Cannot create tagged handler with non-symbol tag \"\n                         (pr-str tag))\n                    {:tag tag, :value-fn value-fn})))\n  (when-not (ifn? value-fn)\n    (throw (ex-info (str \"Cannot create tagged handler for \" tag\n                         \" with non-function value transform\")\n                    {:tag tag, :value-fn value-fn})))\n  (fn handler\n    [printer value]\n    (format-doc printer (tagged-literal tag (value-fn value)))))\n\n(def inst-pattern  \"yyyy-MM-dd'T'HH:mm:ss.SSS-00:00\")\n\n#?(:cljs\n   (defn utc-date [date]\n     (js/Date.\n      (.getUTCFullYear date)\n      (.getUTCMonth date)\n      (.getUTCDate date)\n      (.getUTCHours date)\n      (.getUTCMinutes date)\n      (.getUTCSeconds date)\n      (.getUTCMilliseconds date))))\n\n#?(:clj\n   (defn utc-timestamp-format ^SimpleDateFormat []\n     (doto (SimpleDateFormat. \"yyyy-MM-dd'T'HH:mm:ss\")\n       (.setTimeZone (TimeZone/getTimeZone \"GMT\")))))\n\n(def platform-handlers\n  \"Map of print handlers for Java/JavaScript types. This supports syntax for regular\n  expressions, dates, UUIDs, and futures.\"\n  #?(:clj\n     {java.lang.Class\n      (fn class-handler\n        [printer value]\n        (format-unknown printer value \"Class\" (get-type-name value)))\n\n      java.util.concurrent.Future\n      (fn future-handler\n        [printer value]\n        (let [doc (if (future-done? promise)\n                    (format-doc printer @value)\n                    (color/document printer :nil \"pending\"))]\n          (format-unknown printer value \"Future\" doc)))\n\n      java.util.UUID\n      (tagged-handler 'uuid str)\n\n      java.util.Date\n      (tagged-handler\n       'inst\n       #(-> (java.text.SimpleDateFormat. inst-pattern)\n            (doto (.setTimeZone (java.util.TimeZone/getTimeZone \"GMT\")))\n            (.format ^java.util.Date %)))\n\n      java.util.GregorianCalendar\n      (tagged-handler\n       'inst\n       #(let [formatted (format \"%1$tFT%1$tT.%1$tL%1$tz\" %)\n              offset-minutes (- (.length formatted) 2)]\n          (str (subs formatted 0 offset-minutes)\n               \":\"\n               (subs formatted offset-minutes))))\n\n      java.sql.Timestamp\n      (tagged-handler\n       'inst\n       (fn [ts]\n         (str (.format ^SimpleDateFormat (utc-timestamp-format) ts)\n              (format \".%09d-00:00\" (.getNanos ^Timestamp ts)))))}\n\n     :cljs\n     {inst?\n      (tagged-handler\n       'inst\n       #(.format (DateTimeFormat. inst-pattern) (utc-date %)))\n\n      uuid?\n      (tagged-handler 'uuid str)\n\n      object?\n      (tagged-handler\n       'js\n       (fn [x]\n         ;; non-recursive conversion to map\n         (reduce (fn [m k]\n                   (assoc m k (gobj/get x k)))\n                 {}\n                 (js/Object.keys x))))}))\n\n(def clojure-handlers\n  \"Map of print handlers for 'primary' Clojure types. These should take\n  precedence over the handlers in `clojure-interface-handlers`.\"\n  {#?(:clj clojure.lang.Atom\n      :cljs #(implements? IAtom %))\n   (fn atom-handler\n     [printer value]\n     (format-unknown printer value \"Atom\" (format-doc printer @value)))\n   #?(:clj clojure.lang.Delay\n      :cljs #(implements? Delay %))\n   (fn delay-handler\n     [printer value]\n     (let [doc (if (realized? value)\n                 (format-doc printer @value)\n                 (color/document printer :nil \"pending\"))]\n       (format-unknown printer value \"Delay\" doc)))\n   #?(:clj clojure.lang.ISeq\n      :cljs seq?)\n   (fn iseq-handler\n     [printer value]\n     (fv/visit-seq printer value))})\n\n(def clojure-interface-handlers\n  \"Fallback print handlers for other Clojure interfaces.\"\n  {#?(:clj clojure.lang.IPending\n      :cljs #(implements? IPending %))\n   (fn pending-handler\n     [printer value]\n     (let [doc (if (realized? value)\n                 (format-doc printer @value)\n                 (color/document printer :nil \"pending\"))]\n       (format-unknown printer value doc)))\n   #?(:clj clojure.lang.Fn\n      :cljs fn?)\n   (fn fn-handler\n     [printer value]\n     (let [doc (let [[vname & tail] (-> (get-type-name value)\n                                        (str/replace-first \"$\" \"/\")\n                                        (str/split #\"\\$\"))]\n                 (if (seq tail)\n                   (str vname \"[\"\n                        (->> tail\n                             (map #(first (str/split % #\"__\")))\n                             (str/join \"/\"))\n                        \"]\")\n                   vname))]\n       (format-unknown printer value \"Fn\" doc)))})\n\n(def common-handlers\n  \"Print handler dispatch combining Java and Clojure handlers with inheritance\n  lookups. Provides a similar experience as the standard Clojure\n  pretty-printer.\"\n  #?(:clj (dispatch/chained-lookup\n           (dispatch/inheritance-lookup platform-handlers)\n           (dispatch/inheritance-lookup clojure-handlers)\n           (dispatch/inheritance-lookup clojure-interface-handlers))\n     :cljs (dispatch/chained-lookup\n            (dispatch/predicate-lookup platform-handlers)\n            (dispatch/predicate-lookup clojure-handlers)\n            (dispatch/predicate-lookup clojure-interface-handlers))))\n\n\n;; ## Canonical Printer Implementation\n(defrecord CanonicalPrinter [print-handlers]\n  fv/IVisitor\n\n  ;; Primitive Types\n  (visit-nil\n    [this]\n    \"nil\")\n\n  (visit-boolean\n    [this value]\n    (str value))\n\n  (visit-number\n    [this value]\n    (pr-str value))\n\n  (visit-character\n    [this value]\n    (pr-str value))\n\n  (visit-string\n    [this value]\n    (pr-str value))\n\n  (visit-keyword\n    [this value]\n    (str value))\n\n  (visit-symbol\n    [this value]\n    (str value))\n\n  ;; Collection Types\n  (visit-seq\n    [this value]\n    (if (seq value)\n      (let [entries (map (partial format-doc this) value)]\n        [:group \"(\" [:align (interpose \" \" entries)] \")\"])\n      \"()\"))\n\n  (visit-vector\n    [this value]\n    (if (seq value)\n      (let [entries (map (partial format-doc this) value)]\n        [:group \"[\" [:align (interpose \" \" entries)] \"]\"])\n      \"[]\"))\n\n  (visit-set\n    [this value]\n    (if (seq value)\n      (let [entries (map (partial format-doc this)\n                         (sort order/rank value))]\n        [:group \"#{\" [:align (interpose \" \" entries)] \"}\"])\n      \"#{}\"))\n\n  (visit-map\n    [this value]\n    (if (seq value)\n      (let [entries (map #(vector :span (format-doc this (key %))\n                                  \" \"   (format-doc this (val %)))\n                         (sort-by first order/rank value))]\n        [:group \"{\" [:align (interpose \" \" entries)] \"}\"])\n      \"{}\"))\n\n  ;; Clojure Types\n  (visit-meta\n    [this metadata value]\n    ;; Metadata is not printed for canonical rendering.\n    (format-doc* this value))\n\n  (visit-var\n    [this value]\n    ;; Defer to unknown, cover with handler.\n    (fv/visit-unknown this value))\n\n  (visit-pattern\n    [this value]\n    ;; Defer to unknown, cover with handler.\n    (fv/visit-unknown this value))\n\n  (visit-record\n    [this value]\n    ;; Defer to unknown, cover with handler.\n    (fv/visit-unknown this value))\n\n  ;; Special Types\n  (visit-tagged\n    [this value]\n    [:span (str \"#\" (:tag value)) \" \" (format-doc this (:form value))])\n\n  (visit-unknown\n    [this value]\n    (let [not-defined-representation-message (str \"No defined representation for \"\n                                                  (get-type-name value)\n                                                  \": \"\n                                                  (pr-str value))]\n      (throw (ex-info not-defined-representation-message\n                      {:causes #{:undefined-representation}})))))\n\n(defn canonical-printer\n  \"Constructs a new canonical printer with the given handler dispatch.\"\n  ([]\n   (canonical-printer nil))\n  ([handlers]\n   (assoc (CanonicalPrinter. handlers)\n          :width 0)))\n\n;; Remove automatic constructor function.\n#?(:clj (ns-unmap *ns* '->CanonicalPrinter))\n\n;; ## Pretty Printer Implementation\n(defrecord PrettyPrinter\n\n    [width\n     print-meta\n     sort-keys\n     map-delimiter\n     map-coll-separator\n     namespace-maps\n     seq-limit\n     print-color\n     color-markup\n     color-scheme\n     print-handlers\n     print-fallback]\n\n  fv/IVisitor\n\n  ;; Primitive Types\n  (visit-nil\n    [this]\n    (color/document this :nil \"nil\"))\n\n  (visit-boolean\n    [this value]\n    (color/document this :boolean (str value)))\n\n  (visit-number\n    [this value]\n    (color/document this :number (pr-str value)))\n\n  (visit-character\n    [this value]\n    (color/document this :character (pr-str value)))\n\n  (visit-string\n    [this value]\n    (color/document this :string (pr-str value)))\n\n  (visit-keyword\n    [this value]\n    (color/document this :keyword (str value)))\n\n  (visit-symbol\n    [this value]\n    (color/document this :symbol (str value)))\n\n  ;; Collection Types\n  (visit-seq\n    [this value]\n    (if (seq value)\n      (let [[values trimmed?]\n            (if (and seq-limit (pos? seq-limit))\n              (let [head (take seq-limit value)]\n                [head (<= seq-limit (count head))])\n              [(seq value) false])\n            elements\n            (cond-> (if (symbol? (first values))\n                      (cons (color/document this :function-symbol (str (first values)))\n                            (map (partial format-doc this) (rest values)))\n                      (map (partial format-doc this) values))\n              trimmed? (concat [(color/document this :nil \"...\")]))]\n        [:group\n         (color/document this :delimiter \"(\")\n         [:align (interpose :line elements)]\n         (color/document this :delimiter \")\")])\n      (color/document this :delimiter \"()\")))\n\n  (visit-vector\n    [this value]\n    (if (seq value)\n      [:group\n       (color/document this :delimiter \"[\")\n       [:align (interpose :line (map (partial format-doc this) value))]\n       (color/document this :delimiter \"]\")]\n      (color/document this :delimiter \"[]\")))\n\n  (visit-set\n    [this value]\n    (if (seq value)\n      (let [entries (order-collection sort-keys value (partial sort order/rank))]\n        [:group\n         (color/document this :delimiter \"#{\")\n         [:align (interpose :line (map (partial format-doc this) entries))]\n         (color/document this :delimiter \"}\")])\n      (color/document this :delimiter \"#{}\")))\n\n  (visit-map\n    [this value]\n    (if (seq value)\n      (let [[common-ns stripped] (when namespace-maps (common-key-ns value))\n            kvs (order-collection sort-keys\n                                  (or stripped value)\n                                  (partial sort-by first order/rank))\n            entries (map (fn [[k v]]\n                           [:span\n                            (format-doc this k)\n                            (if (coll? v)\n                              map-coll-separator\n                              \" \")\n                            (format-doc this v)])\n                         kvs)\n            map-doc [:group\n                     (color/document this :delimiter \"{\")\n                     [:align (interpose [:span map-delimiter :line] entries)]\n                     (color/document this :delimiter \"}\")]]\n        (if common-ns\n          [:group (color/document this :tag (str \"#:\" common-ns)) :line map-doc]\n          map-doc))\n      (color/document this :delimiter \"{}\")))\n\n  ;; Clojure Types\n  (visit-meta\n    [this metadata value]\n    (if print-meta\n      [:align\n       [:span (color/document this :delimiter \"^\") (format-doc this metadata)]\n       :line (format-doc* this value)]\n      (format-doc* this value)))\n\n  (visit-var\n    [this value]\n    [:span\n     (color/document this :delimiter \"#'\")\n     (color/document this :symbol (subs (str value) 2))])\n\n  (visit-pattern\n    [this value]\n    [:span\n     (color/document this :delimiter \"#\")\n     (color/document this :string (str \\\" value \\\"))])\n\n  (visit-record\n    [this value]\n    (fv/visit-tagged\n     this\n     (tagged-literal (symbol (get-type-name value))\n                     (into {} value))))\n\n  ;; Special Types\n  (visit-tagged\n    [this value]\n    (let [{:keys [tag form]} value]\n      [:group\n       (color/document this :tag (str \"#\" (:tag value)))\n       (if (coll? form) :line \" \")\n       (format-doc this (:form value))]))\n\n  (visit-unknown\n    [this value]\n    (case print-fallback\n      :pretty\n      (format-unknown this value)\n\n      :print\n      [:span (pr-str value)]\n\n      :error\n      (throw (ex-info (str \"No defined representation for \" (get-type-name value) \": \" (pr-str value))\n                      {:causes #{:undefined-representation}}))\n      (if (ifn? print-fallback)\n        (print-fallback this value)\n        (throw (ex-info (str \"Unsupported value for print-fallback: \" (pr-str print-fallback))\n                        {:causes #{:unsupported-value}}))))))\n\n(defn pretty-printer\n  \"Constructs a new printer from the given configuration.\"\n  [opts]\n  (->> [{:print-meta *print-meta*\n         :print-handlers common-handlers}\n        *options*\n        opts]\n       (reduce merge-options)\n       (map->PrettyPrinter)))\n\n;; Remove automatic constructor function.\n#?(:clj (ns-unmap *ns* '->PrettyPrinter))\n\n;; ## Printing Functions\n(defn render-out\n  \"Prints a value using the given printer.\"\n  ([printer value]\n   (render-out printer value nil))\n  ([printer value opts]\n   (binding [*print-meta* false]\n     (fe/pprint-document\n      (format-doc printer value)\n      (merge {:width (:width printer)}\n             opts)))))\n\n(defn render-str\n  \"Renders a value to a string using the given printer.\"\n  ^String\n  [printer value]\n  (str/trim-newline\n   (with-out-str\n     (render-out printer value))))\n\n(defn pprint\n  \"Pretty-prints a value to *out*. Options may be passed to override the\n  default *options* map.\"\n  ([value]\n   (pprint value nil))\n  ([value opts]\n   (render-out (pretty-printer opts) value opts)))\n\n(defn pprint-str\n  \"Pretty-print a value to a string.\"\n  ([value]\n   (pprint-str value nil))\n  ([value opts]\n   (render-str (pretty-printer opts) value)))\n\n(defn cprint\n  \"Like pprint, but turns on colored output.\"\n  ([value]\n   (cprint value nil))\n  ([value opts]\n   (pprint value (assoc opts :print-color true))))\n\n(defn cprint-str\n  \"Pretty-prints a value to a colored string.\"\n  ([value]\n   (cprint-str value nil))\n  ([value opts]\n   (pprint-str value (assoc opts :print-color true))))\n"]}