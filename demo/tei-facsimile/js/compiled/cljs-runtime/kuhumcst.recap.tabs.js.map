{"version":3,"sources":["kuhumcst/recap/tabs.cljs"],"mappings":"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","names":["p__46652","map__46653","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","kuhumcst.recap.tabs/mk-drag-state","tabs","i","n","tab","kuhumcst.recap.util/vec-dissoc","cljs.core/meta","p__46672","map__46677","kuhumcst.recap.tabs/mk-drop-state","kuhumcst.recap.util/vec-assoc","kuhumcst.recap.tabs/mk-tab-id","tab-list-id","p__46715","map__46716","kuhumcst.recap.tabs/tab-list","state","opts","map__46726","cljs.core/deref","append","cljs.core._EQ_","cljs.core.swap_BANG_","cljs.core/count","iter__4582__auto__","s__46747","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__46749","cljs.core/chunk-buffer","i__46748","cljs.core/-nth","vec__46765","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46746","cljs.core/chunk-rest","cljs.core/first","vec__46789","cljs.core/cons","cljs.core/rest","cljs.core.range","k","_","cljs.core/with-meta","id","delete","insert","select","cljs.core/assoc","cljs.core.merge","kuhumcst.recap.util/tab-attr","cljs.core/hash","kuhumcst.recap.drag/on-drag-start","kuhumcst.recap.drag/on-drag-over","kuhumcst.recap.drag/on-drop","p__46808","map__46809","kuhumcst.recap.tabs/tab-panel","map__46812","vec__46814","v","cljs.core/not-empty","tab-id","p__46831","map__46832","kuhumcst.recap.tabs/tabs","cljs.core/chunk-first"],"sourcesContent":["(ns kuhumcst.recap.tabs\n  \"Reagent components for creating a tabbed UI.\n\n  Shared state for tab components:\n    `tabs` - key-value pairs of tab labels and bodies.\n    `i`    - (optional) the index of the currently selected tab.\n\n  Shared opts for tab components:\n    `tab-list-id` - a unique id attribute for the tab-list.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel\"\n  (:require [kuhumcst.recap.drag :as rd]\n            [kuhumcst.recap.util :as util]))\n\n;; TODO: fix issue with button padding area not being draggable (only in FF)\n;; TODO: fix - selecting a tab resets focus to an earlier tab in the list\n;;       actually, this is OK, but tabs should be selected using arrow keys\n;; TODO: deterministic random background colour of the tab labels\n;;       cycle through a set of standard colours and set as metadata on key-value pair\n\n(defn- mk-drag-state\n  [{:keys [tabs i] :or {i 0}} n tab]\n  {:tabs (util/vec-dissoc tabs n)\n   :i    (cond\n           (:selected? (meta tab)) 0\n           (< n i) (dec i)\n           :else i)})\n\n(defn- mk-drop-state\n  [{:keys [tabs i] :or {i 0}} n tab]\n  {:tabs (util/vec-assoc tabs n tab)\n   :i    (cond\n           (:selected? (meta tab)) n\n           (<= n i) (inc i)\n           :else i)})\n\n(defn- mk-tab-id\n  [tab-list-id n]\n  (str tab-list-id \"-\" n))\n\n(defn tab-list\n  \"The tabs available in the `state`.\"\n  [state {:keys [tab-list-id] :as opts}]\n  (let [{:keys [tabs i] :or {i 0}} @state\n        append (fn [tab]\n                 (if (= tab-list-id (:tab-list-id (meta tab)))\n                   (swap! state mk-drop-state (dec (count tabs)) tab)\n                   (swap! state mk-drop-state (count tabs) tab)))]\n    [:div.tab-list {:id   tab-list-id\n                    :role \"tab-list\"}\n     (for [n (range (count tabs))\n           :let [[k _ :as tab] (with-meta (nth tabs n)\n                                          {:tab-list-id tab-list-id\n                                           :selected?   (= n i)})\n                 id     (mk-tab-id tab-list-id n)\n                 delete (fn []\n                          (swap! state mk-drag-state n tab)\n                          tab)\n                 insert (fn [tab]\n                          (swap! state mk-drop-state n tab))\n                 select (fn []\n                          (swap! state assoc :i n))]]\n       ;; Would prefer using button, but FF excludes its padding from drag area.\n       [:span.tab (merge (util/tab-attr select)\n                         {:key           (hash [tabs i n])\n                          :id            id\n                          :aria-selected (:selected? (meta tab))\n                          :draggable     true\n                          :on-drag-start (rd/on-drag-start delete)\n                          :on-drag-over  (rd/on-drag-over)\n                          :on-drop       (rd/on-drop insert)})\n        k])\n     [:span.tab-list__spacer {:on-drag-over (rd/on-drag-over)\n                              :on-drop      (rd/on-drop append)}]]))\n\n(defn tab-panel\n  \"The currently selected tab-panel of the `state`.\"\n  [state {:keys [tab-list-id] :as opts}]\n  (let [{:keys [tabs i] :or {i 0}} @state\n        [_ v] (when (not-empty tabs)\n                (nth tabs i))\n        tab-id (mk-tab-id tab-list-id i)]\n    [:section.tab-panel {:aria-labelledby tab-id}\n     v]))\n\n(defn tabs\n  \"A merged view of the tab-list and the tab-panel of the currently selected tab.\n  Takes `state` of the form described in the docstring of this namespace.\"\n  [state {:keys [tab-list-id] :as opts}]\n  [:article.tabs\n   [tab-list state opts]\n   [tab-panel state opts]])\n"]}