{"version":3,"sources":["rescope/formats/xml.cljs"],"mappings":";AAQA,AAAA,AAAOA,AACJC;AADH,AAEM,AAAAC,AACA,AAAA,AAAkBD,AAClB;;AAMN,AAAA,AAAA,AAAAE,AAAAC,AAAA,AAAA;;AAAA,AAAAD,AAAAE,AAAA,AAEE,AAAYC;AAAZ,AACE,AAAAC,AAAOG;AAAPF,AAAS,AAAYF;AAArB,AAAA,AAAA,AAAAC,AAAAA,AAAAC,AAAAD,AAAAC,AACEG,AAAAA;AADF,AACqB,AAACC,AAA0B,AAAQN,AACnC,AAASA;;AAF9B,AAAA,AAAAC,AAAAA,AAAAC,AAAAD,AAAAC,AAGEK,AAAAA;AAHF;;AAAA,AAAA,AAAAN,AAAAA,AAAAC,AAAAD,AAAAC,AAIEM,AAAAA;AAAiB,AAACC,AAAIV,AAAkB,AAAcC;;AAJxD,AAAA,AAAAC,AAAAA,AAAAC,AAAAD,AAAAC,AAKEQ,AAAAA;AAAqB,AAACC,AAAuBX;;AAL/C,AAAA,AAAAC,AAAAA,AAAAC,AAAAD,AAAAC,AAMEU,AAAAA;AAAgB,AAAMC,AAAa,AAAWb,AACX,AAACM;AACdQ,AAAS,AAAA,AAACC,AAAa,AAAcf,AACd,AAACS,AAAIV;AAC5BiB,AAAS,AAAchB;AACvBiB,AAAS,AAACR,AAAIV,AAAkBiB;AALtC,AAME,AAAA,AAACD,AAAQ,AAAA,AAACG,AAAQL,AAAIC,AAAM,AAACK,AAAOC,AAAKH;;AAZ7D,AAAA,AAAAhB,AAAAA,AAAAC,AAAAD,AAAAC,AAaEmB,AAAAA;AAAa,AAAMC,AAAE,AAAatB;AAArB,AACE,AAAU,AAACuB,AAAWD;AAAtB;;AAAA,AACE,AAACE,AAAmBF;;;AAfvC,AAAA,AAAAnB,AAAA,AAAA,AAAAD;;;;;;;;AAiBJ;;;AAAA,AAAMuB,AAEH9B;AAFH,AAGE,AAACI,AAAkB,AAACL,AAAUC","names":["rescope.formats.xml/dom-parse","xml","js/DOMParser","goog.object/set","hickory.core/HiccupRepresentable","hickory.core/as-hiccup","this","pred__52507","expr__52508","js/Error","cljs.core/=","hickory.core/Attribute","hickory.utils/lower-case-keyword","hickory.core/Comment","hickory.core/Document","cljs.core.map","hickory.core/DocumentType","hickory.core/format-doctype","hickory.core/Element","tag","attr","cljs.core.into","children","content","cljs.core.concat","cljs.core.remove","cljs.core/nil?","hickory.core/Text","s","clojure.string/blank?","hickory.utils/html-escape","rescope.formats.xml/parse"],"sourcesContent":["(ns rescope.formats.xml\n  \"Parse XML as hiccup.\"\n  (:require [clojure.string :as str]\n            [hickory.core :as hickory]\n            [hickory.utils :as hutils]))\n\n;; Hickory in fact calls the same DOM method in hickory.core/parse, but has\n;; been hardcoded to use the \"text/html\" mimetype rather than \"xml\"!\n(defn- dom-parse\n  [xml]\n  (-> (js/DOMParser.)\n      (.parseFromString xml \"text/xml\")\n      (.-firstChild)))\n\n;; Custom variation of Hickory's HiccupRepresentable (for XML):\n;;  * Doesn't preserve comments.\n;;  * Doesn't preserve empty whitespace.\n;;  * Doesn't check for unescapable content (<style> and <script>).\n(extend-protocol hickory/HiccupRepresentable\n  object\n  (as-hiccup [this]\n    (condp = (.-nodeType this)\n      hickory/Attribute [(hutils/lower-case-keyword (.-name this))\n                         (.-value this)]\n      hickory/Comment nil\n      hickory/Document (map hickory/as-hiccup (.-childNodes this))\n      hickory/DocumentType (hickory/format-doctype this)\n      hickory/Element (let [tag      (-> (.-tagName this)\n                                         (hutils/lower-case-keyword))\n                            attr     (into {} (->> (.-attributes this)\n                                                   (map hickory/as-hiccup)))\n                            children (.-childNodes this)\n                            content  (map hickory/as-hiccup children)]\n                        (into [] (concat [tag attr] (remove nil? content))))\n      hickory/Text (let [s (.-wholeText this)]\n                     (when-not (str/blank? s)\n                       (hutils/html-escape s))))))\n\n(defn parse\n  \"Na\u00efvely convert an `xml` string into a raw hiccup representation.\"\n  [xml]\n  (hickory/as-hiccup (dom-parse xml)))\n"]}